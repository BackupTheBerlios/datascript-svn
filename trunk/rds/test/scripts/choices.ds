package choices;


choice ParamContent5(VariantA a, uint8 sel) on sel
{
    case 1:     Black black;
    case 2:     ParamContent3(a) grey;
    case 3:     White white;
};


choice ParamContent4(VariantA a, Selector sel) on sel
{
    case BLACK:     Black black;
    case GREY:      ParamContent3(a) grey;
    case WHITE:     White white;
};

Container
{
    uint16   tag;
    Content  content;
};

/**
 *  This is a very important note
 */
choice Content on Container.tag
{
    case 1:
        /** 
         * choice member comment 
         * if it's variant A
         */
        VariantA  a;

    case 2:
    case 3:
    case 4:
        /** 
         * variant B is only possible with cases 2-4
         */
        VariantB  b;
        
    case 5:
    case 6:
        // empty
          ;    

    default:
        /** 
         *  else take the default variant
         */
        VariantC  c;

    function uint32 sensless()
    {
        return 1;
    }
};

subtype int8  VariantA;
subtype int16 VariantB;
subtype int32 VariantC;



ParamContainer
{
    Selector  selector;
    ParamContent(selector)  content;
};

enum uint8 Selector
{
    BLACK,
    GREY,
    WHITE    
};

choice ParamContent(Selector sel) on sel
{
    case BLACK:  Black black;
    case WHITE:  White white;
    default:
           /*empty*/ ;
};

subtype int16  Black;
subtype uint32 White;


ParamContainer2
{
    Selector  selector;
    ParamContent2(selector)  content;
};


/**
 * We do not cover all selector values in this
 * choice. Reading a selector value GREY shall cause a
 * runtime exception.
 */
choice ParamContent2(Selector sel) on sel
{
    case BLACK:  Black black;
    case WHITE:  White white;
};


choice ParamContent3(uint16 sel) on sel
{
    case 1000:  Black black;
    case 2000:  White white;
    
    function uint16 div()
    {
        return sel/100;
    }
};

