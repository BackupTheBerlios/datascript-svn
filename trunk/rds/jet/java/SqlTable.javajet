<%
/* BSD License
 *
 * Copyright (c) 2006, Harald Wellmann, Harman/Becker Automotive Systems
 * All rights reserved.
 * 
 * This software is derived from previous work
 * Copyright (c) 2003, Godmar Back.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 * 
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 * 
 *     * Neither the name of Harman/Becker Automotive Systems or
 *       Godmar Back nor the names of their contributors may be used to
 *       endorse or promote products derived from this software without
 *       specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%>
<%@ jet package="datascript.jet.java" 
        imports="datascript.ast.* datascript.emit.java.*" 
        class="SqlTable" %>
<%
    SqlTableEmitter e = (SqlTableEmitter) argument;
    String pkg = e.getGlobal().getPackageName();
    SqlTableType table = e.getSqlTableType();
    String name = table.getName();

    String q = "?";
    for (int i = 1; i < table.getNumFields(); i++)
    {
        q += ",?";
    }
    String rdsVersion = e.getGlobal().getRDSVersion();
%>
<%@include file="FileHeader.inc"%>
// DS-Import
<%=e.getGlobal().getPackageImports()%>

import java.sql.*;


public class <%=name%>
{
    private SqlDatabase db;
    private String tableName;
    private PreparedStatement insertRow;
    
    public <%=name%>(SqlDatabase db) throws SQLException
    {
        this.db = db;
    }
    
    public void createTable(String __tableName) throws SQLException
    {
        Connection dbc = db.getConnection();
        this.tableName = __tableName;
        Statement st = dbc.createStatement();
        StringBuilder query = new StringBuilder("CREATE TABLE ");
        query.append(__tableName);
<%
    int fieldCount = 0;
    for (Field f : table.getFields())
    {
        String sql = f.getSqlConstraint();
        String comma = (fieldCount == 0) ? "( " : ", ";
        String fname = f.getName();
		TypeInterface ftype = TypeReference.resolveType(f.getFieldType());

        if ((ftype instanceof SqlIntegerType) || (ftype instanceof IntegerType))
        {
            int typeSize = f.sizeof(null).integerValue().intValue();
            if (typeSize <= 8)
                typeSize = 8;
            else if (typeSize <= 16)
                typeSize = 16;
            else if (typeSize <= 24)
                typeSize = 24;
            else if (typeSize <= 32)
                typeSize = 32;
            else if (typeSize <= 48)
                typeSize = 48;
            else if (typeSize <= 64)
                typeSize = 64;
            else /* if (totalTypeSize > 64) */
                throw new RuntimeException("size of type '" + fname + "' in '" + name + "' exceed 64 bits");
%>
        query.append("<%=comma%><%=fname%> INTEGER(<%=typeSize/8%>)  NOT NULL <%=sql%>");
<%
        }
        else
        {
            //String sqlType = SqlTypeNameEmitter.getTypeName(f.getFieldType());
%>
        query.append("<%=comma%><%=fname%> BLOB  NOT NULL <%=sql%>");
<%
        }
        fieldCount++;
    }
    String constraint = e.getSqlConstraint();
    String sql = (constraint == null) ? "" : (", " + constraint);
%>
        query.append("<%=sql%>)");
        st.executeUpdate(query.toString());        
    }
    
    
    public void write(BitStreamWriter __out) throws SQLException, IOException
    {
        throw new RuntimeException("write() method is not yet implemented");
    }
    
}

// END OF FILE
    