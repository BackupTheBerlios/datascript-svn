<%
/* BSD License
 *
 * Copyright (c) 2006, Harald Wellmann, Harman/Becker Automotive Systems
 * All rights reserved.
 * 
 * This software is derived from previous work
 * Copyright (c) 2003, Godmar Back.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 * 
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 * 
 *     * Neither the name of Harman/Becker Automotive Systems or
 *       Godmar Back nor the names of their contributors may be used to
 *       endorse or promote products derived from this software without
 *       specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%>
<%@ jet package="datascript.jet.java" 
        imports="datascript.ast.* datascript.emit.java.*" 
        class="Enumeration" %>
<% 
    EnumerationEmitter e = (EnumerationEmitter) argument;
    String pkg = e.getGlobal().getPackageName(); 
    EnumType en = e.getEnumerationType();
    String name = en.getName();
    String baseType = e.getBaseType();
    String cast = baseType.equals("int") ? "" : ("(" + baseType + ")");
%>
<%@include file="FileHeader.inc"%>
// DS-Import
<%=e.getGlobal().getPackageImports()%>


public enum <%=name%> implements SizeOf
{
    <%
       for (EnumItem item : en.getItems()) 
       {
           String iname = item.getName();
           int value = item.getValue().integerValue().intValue();
    %>
    <%=iname%>(<%=cast%><%=value%>),
    <%
       }
    %>   
    __INVALID(<%=cast%>-1);

    private <%=baseType%> value;

    <%=name%>(<%=baseType%> value)
    {
        this.value = value;
    }

    public <%=baseType%> getValue()
    {
        return value;
    }

    public static <%=name%> toEnum(<%=baseType%> v)
    {
        switch (v)
        {
        <%
           for (EnumItem item : en.getItems()) 
           {
               String iname = item.getName();
               int value = item.getValue().integerValue().intValue();
        %>
            case <%=value%>:
                return <%=iname%>;
        <%
           }
        %>   
            default:
                throw new IllegalArgumentException();
        }
    }

    public void accept(__Visitor visitor, Object arg)
    {
        visitor.visit(this, arg);
    }
    
    public int sizeof() 
    {
        return <%=en.sizeof(null).integerValue().intValue()%>;
    }
}


