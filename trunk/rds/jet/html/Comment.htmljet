<%
/* BSD License
 *
 * Copyright (c) 2007, Henrik Wedekind, Harman/Becker Automotive Systems
 * All rights reserved.
 * 
 * This software is derived from previous work
 * Copyright (c) 2003, Godmar Back.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 * 
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 * 
 *     * Neither the name of Harman/Becker Automotive Systems or
 *       Godmar Back nor the names of their contributors may be used to
 *       endorse or promote products derived from this software without
 *       specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%>
<%@ jet package="datascript.jet.html" 
        imports="java.io.StringReader datascript.antlr.* antlr.TokenBuffer antlr.collections.AST" 
        class="Comment" %>
<%
    StringReader is = new StringReader((String) argument);
    DocCommentLexer lexer = new DocCommentLexer(is);
    TokenBuffer tBuffer = new TokenBuffer(lexer);
    DocCommentParser parser = new DocCommentParser(tBuffer);
    try
    {
        parser.comment();
        AST docNode = parser.getAST();
        AST child = docNode.getFirstChild();
        for (; child != null; child = child.getNextSibling())
        {
        	AST textAst = child.getFirstChild();
%>

    <div class="docuTag"<%
            switch (child.getType())
            {
                case DocCommentParserTokenTypes.TEXT:
                {
    			%>>
        <%=child.getText()%><%
                    break;
                }

                case DocCommentParserTokenTypes.AT:
                {
                    String tag = child.getText().toUpperCase();
    				%> id="<%=tag%>">
        <span><%=child.getText()%>:</span> <%
                    if (textAst == null)
                    {
                    	%><br/><b>null</b><br/><%
                        break;
                    }
        			if (tag.equals("PARAM"))
	                {
	                    java.util.regex.Pattern pattern = 
	                    	java.util.regex.Pattern.compile("\\s+");
	                    String[] parts = pattern.split(textAst.getText(), 2);
						%> <code><%=parts[0]%></code> &minus;&gt; <%=parts[1]%><%
	                }
					else if (tag.equals("SEE"))
	                {
						%> <a href="<%=textAst.getText()%>.html"><%=textAst.getText()%></a><%
	                }
	                else if(tag.equals("TODO"))
	                {
						%> <%=textAst.getText()%><%
	                }
					else
	                {
						%> <i>unknown tag "<%=tag%>"</i><%
	                    //throw new RuntimeException("unknown tag \"" + tag + "\" for type " + child.getType());
	                }
	                textAst = textAst.getNextSibling();
	                break;
                }
            }	// end of switch

	        for (; textAst != null; textAst = textAst.getNextSibling())
	        {
    			%><%=textAst.getText()%> <%
	        }
    		%></div>
<%
        }	// end of for
    }
    catch (Exception exc)
    {
    	System.err.println("Error in comment:\n" + argument);
        //exc.printStackTrace();
    }
%>