<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<article>
  <title>Developing an Event-Based DataScript Instance Parser</title>

  <articleinfo>
    <author>
      <firstname>Harald</firstname>

      <surname>Wellmann</surname>

      <email>HWellmann@harmanbecker.com</email>
    </author>

    <affiliation>
      <orgname>Harman/Becker Automotive Systems</orgname>
    </affiliation>

    <revhistory>
      <revision>
        <revnumber>0.1</revnumber>

        <date>15 Nov 2007</date>

        <revdescription>
          <para>Initial version.</para>
        </revdescription>
      </revision>
    </revhistory>
  </articleinfo>

  <section>
    <title>Introduction</title>

    <section>
      <title>Motivation</title>

      <para>Define a DataScript metamodel in DataScript (metamodel.ds). The
      metamodel is a serialized binary representation of the Abstract Syntax
      Tree constructed by the DataScript parser. The structure of the
      metamodel should as closely as possible reflect the structure of the
      AST.</para>

      <para>Develop an rds extension datascript.metamodel that outputs the
      binary metamodel for a given input. This extension should use the
      tree-based classes generated by rds from metamodel.ds. A new emitter
      populates the DataScript objects generated from the metamodel and then
      simply invokes the write() method of the top-level object to output the
      binary metamodel to a file.</para>

      <para>Develop an rds extension datascript.event.java that outputs Java
      constant definitions for all types and fields from a given DataScript
      model. The constants shall be public static final integers in a Java
      package that matches the corresponding DataScript package.</para>

      <para>Refine the first draft of the DataScriptInstanceParser interface
      and implement an instance parser providing this interface. The instance
      parser first loads a binary DataScript model. Having loaded the model,
      the parser can parse an instance of a model from a stream. If an
      DataScriptInstanceHandler has been passed to the parser, the parser will
      fires SAX-style events allowing the instance handler to interpret the
      content of the binary stream.</para>

      <para>Develop an rds extension datascript.event.cpp that outputs C++
      constant definitions for all types and fields from a given DataScript
      model, similar to the datascript.event.java.extension.</para>

      <para></para>
    </section>
  </section>
</article>