<%
/* BSD License
 *
 * Copyright (c) 2006, Harald Wellmann, Harman/Becker Automotive Systems
 * All rights reserved.
 * 
 * This software is derived from previous work
 * Copyright (c) 2003, Godmar Back.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 * 
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 * 
 *     * Neither the name of Harman/Becker Automotive Systems or
 *       Godmar Back nor the names of their contributors may be used to
 *       endorse or promote products derived from this software without
 *       specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%> 
<%@ jet package="datascript.jet.java" 
        imports="datascript.ast.* datascript.emit.java.*" 
        class="SequenceRead" %>
<% 
    SequenceEmitter e = (SequenceEmitter) argument;
    String pkg = e.getGlobal().getPackageName();
    SequenceType s = e.getSequenceType();
    String name = s.getName();
    ExpressionEmitter ee = new ExpressionEmitter(); 
    String formalPar = e.getFormalParameterList();
    String actualPar = e.getActualParameterList();
%>
    // TODO: Emit constructor from member values.
    	
    public <%=name%>(String __filename<%=formalPar%>) throws IOException 
    {
        FileBitStreamReader __in = new FileBitStreamReader(__filename);
        read(__in, new CallChain()<%=actualPar%>);
        __in.close();
    }

    public <%=name%>(BitStreamReader __in<%=formalPar%>) throws IOException 
    {
    	read(__in, new CallChain()<%=actualPar%>);
    }

    public <%=name%>(BitStreamReader __in, CallChain __cc<%=formalPar%>) throws IOException 
    {
    	read(__in, __cc<%=actualPar%>);
    }

    public void read(BitStreamReader __in, CallChain __cc<%=formalPar%>) throws IOException 
    {
<%
	for (Parameter param : s.getParameters())
	{
		String pName = param.getName();
%>
        this.<%=pName%> = <%=pName%>;
<%
	}
%>    
        try 
        {
            __cc.push("<%=name%>", this);
            __fpos = __in.getBitPosition();
            try 
            {
<%
	for (Field field : s.getFields())
	{
	    String label = e.getLabelExpression(field);
	    if (label != null)
	    {
%>
                if (__in.getBitPosition() != <%=label%>)
                {
                    throw new IOException("wrong offset for field '<%=field.getName()%>'");
                } 
<%
	    }
	    String optional = e.getOptionalClause(field);
        String constraint = e.getConstraint(field);
	    if (optional != null)
	    {
%>
                if (<%=optional%>)
                {
                    <%=e.readField(field)%>
<%
        	if (constraint != null)
        	{
%>
                	if (!(<%=constraint%>))
                	{
                    	throw new IOException("constraint violated");
                	}
<%
        	}
%>
                }
<%
        }
        else
        {
%>                            
                <%=e.readField(field)%>
<%
        	if (constraint != null)
        	{
%>
               	if (!(<%=constraint%>))
               	{
                   	throw new IOException("constraint violated");
               	}
<%
        	}
        }
	}	// end of for (Field field : s.getFields())
%>                
            } 
            catch (IOException __e1) 
            {
                __in.setBitPosition(__fpos);
                throw __e1;
       	    }
        }
        finally 
        { 
            __cc.pop(); 
        }
    }
