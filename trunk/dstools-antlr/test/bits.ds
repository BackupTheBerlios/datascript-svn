package bits;

/**
 * Comment for Unsigned.
 */
Unsigned
{
    uint8       u8;
    uint16      u16;
    uint32      u32;
    uint64      u64;
};

BitStruct
{
    bit:4       a;
    uint8       b;
    bit:4       c;
};

LongBitField
{
    uint8       a;
    bit:80      b;
    int16       c;
};


Outer
{
    int16       a;
    Header      header;
    Inner       inner;
};

Header
{
    int16       len;
    int16       c;
};

Inner
{
    int8        d;
    int16       list[Outer.header.len];
    int32       e;
};



IntegerArray
{
     uint16             numElems;
     int8               int8List[numElems];
     uint8              uint8List[numElems];
     int16              int16List[numElems];
     uint16             uint16List[numElems];
     int32              int32List[numElems];
     uint32             uint32List[numElems];
};

CompoundArray
{
    int16       numItems;
    ItemA       a[numItems];
    ItemB       b[numItems];
};

ItemA
{
    uint8       tag : tag == 1;
    uint16      value;
};

ItemB
{
    uint8       tag : tag == 2;
    uint32      value;
};

ItemC
{
    uint8       tag = 3;
    int64       value;
};

union AnyItem
{
    ItemA a;        
    ItemB b;
    ItemC c;        
};

MixedArray
{
    uint16      numItems;
    AnyItem     items[numItems];
};

enum uint16 Colour
{
    RED = 1,
    GREEN,
    YELLOW,
    BLUE = 7
};

enum uint8 Dimension
{
    LENGTH = 1,
    WIDTH = 2,
    HEIGHT = 3
};

Enums
{
    Colour colour1;
    Colour colour2;
    Dimension dim1;
    Dimension dim2;
};

Blocks
{
    uint16              numBlocks;
    Block               blocks[numBlocks];
};

Block
{
    BlockHeader         header;
    BlockData(header)   data;
};

BlockHeader
{
    BlockType           type;
    uint16              size;
};

BlockData(BlockHeader header)
{
    // TODO: emit "L" constant for long values
    uint32              magic = 0x0EADBEEF;
    
    // TODO: emit UnsignedByteArray when element type is uint8
    int8                bytes[header.size];
};

enum uint8 BlockType
{
    UNSORTED = 3,
    SORTED   = 9
};

Optional
{
    uint8       tag;
    uint16      a;
    uint32      b if tag == 99 : b > a;
    ItemA       ia if tag == 98;
    uint16      c;
};

VarArray
{
    ItemA       a[];
    ItemB   	b;
    uint16      len : len == lengthof a;
};

VarArrayWithSize
{
   VarArray     var;
   uint16       size = sizeof var;
};

ParamArray
{
    uint16                          numItems;
    uint16		                    size[numItems];
    ParamBlock(size[block$index])   block[numItems];
};

ParamBlock(uint16 size)
{
    // TODO: emit UnsignedByteArray when element type is uint8
    int8       data[size];
};


GlobalLabelSeq
{
    uint16		    magic = 0xFFFF;
    LabelledType    lt;
};

LabelledType
{
    uint16	numItems;
    uint16  dataOffset;
    uint16  globalOffset;
    Header	headers[numItems];
dataOffset:    
    ItemA	a[numItems];
GlobalLabelSeq::globalOffset:
    int32	x;
};

CondExpr
{
    uint8	    tag;
    CondBlock(tag % 2 == 0 ? 47 : 11)  block;
};

CondBlock(uint8 tag)
{
    int32	    value : value == tag;
};

VarBitField
{
    bit:5           numBits;
    Coord(numBits)  coord;
};

Coord(bit:5 n)
{    
    bit<n>    x;
    bit<n>    y;
    bit<n>    array[2];	
};

BaseTypes
{
    uint8     tag;
    union BaseTypeUnion
    {
        int8  v8  : tag == 8;
        int16 v16 : tag == 16;
        int32 v32 : tag == 32;
    } value;    
};

OptionalArraySequence
{
	int8	kleinesArray[3];
	uint16	count;
	int16	a[count]    if count > 0;
	int16	b[1]        if count == 0;
};

RecursiveStructure
{
	uint8	count;
	RecursiveData(count) theElement	if count > 0;
};

RecursiveData(uint8 byteCount)
{
	uint8	dataBytes[byteCount]	: byteCount > 0;
	uint8	blockTerminator;

	RecursiveData(blockTerminator)	nextData	if blockTerminator > 0;
};

subtype uint16  TileId;
subtype uint32  TileData;

Tile
{
    TileId    tileId;
    TileData  tileData;
};
