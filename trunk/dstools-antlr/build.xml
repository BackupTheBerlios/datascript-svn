<project name="ds-antlr" default="jar" basedir=".">

  <property name="build" value="${basedir}/build"/>
  <property name="src" value="${basedir}/src"/>
  <property name="lib" value="${basedir}/lib"/>
  <property name="test" value="${basedir}/test"/>
  <property name="examples" value="${basedir}/examples"/>
  <property name="gen" value="${build}/gen"/>
  <property name="jar" value="${build}/jar"/>
  <property name="jet.timestamp" value="${gen}/jet.ts"/>
  <property name="classes" value="${build}/classes"/>
  <property name="antlr" value="${basedir}/antlr"/>
  <property name="antlr.out" value="${gen}/datascript/antlr"/>

  
  <taskdef name="jetc" classname="ch.paranor.epla.structure.JETCTask">

    <classpath>
      <pathelement location="${basedir}/lib/jetc-task.jar"/>
      <!--fileset dir="${eclipse.plugins.dir}">
        <include name="org.eclipse.core.boot_2.1.0/boot.jar"/>
        <include name="org.eclipse.core.resources_2.1.0/resources.jar"/>
        <include name="org.eclipse.core.runtime_2.1.0/runtime.jar"/>

        <include name="org.eclipse.emf.codegen_1.1.0/runtime/codegen.jar"/>
        <include name="org.eclipse.jdt.core_2.1.0/jdtcore.jar"/>
      </fileset-->
    </classpath>
  </taskdef>
  

  <target name="clean" description="removes all generated datascript Java sources and classes">
    <delete dir="${build}"/>
  </target>
	
	<target name="cleanall" depends="clean, test.clean, examples.clean" description="removes all generated Java sources and classes" />

  <target name="init">
    <uptodate 
       property="jet.uptodate" targetfile="${jet.timestamp}">
      <srcfiles dir="${basedir}" includes="jet/java/* jet/html/*"/>
    </uptodate>    

    <available classname="junit.framework.Test" property="junit.available">
    </available>
  </target>

  <target name="check.junit" unless="junit.available">
    <fail message="JUnit is not available."/>
  </target>

  <target name="prepare" depends="init">
    <mkdir dir="${build}" />
    <mkdir dir="${build}/test/classes" />
    <mkdir dir="${build}/test/gen" />
    <mkdir dir="${build}/examples/classes" />
    <mkdir dir="${build}/examples/gen" />
    <mkdir dir="${gen}" />
    <mkdir dir="${jar}" />
    <mkdir dir="${classes}" />
    <mkdir dir="${antlr.out}" />
    <copy  file="${lib}/antlr.jar" todir="${jar}" />
  </target>

  <target name="antlr.DatascriptParser" depends="prepare">
    <antlr 
      target="${antlr}/DataScriptParser.g"
      outputdirectory="${antlr.out}">
    </antlr>
  </target> 
  
  <target name="antlr.DatascriptLexer" depends="antlr.DatascriptParser">
    <antlr 
      target="${antlr}/DataScriptLexer.g"
      outputdirectory="${antlr.out}">
    </antlr>
  </target> 
  
  <target name="antlr.DatascriptWalker" depends="antlr.DatascriptLexer">
    <antlr 
      target="${antlr}/DataScriptWalker.g"
      outputdirectory="${antlr.out}">
    </antlr>
  </target> 
  
  <target name="antlr.TypeEvaluator" depends="antlr.DatascriptWalker">
    <antlr 
      target="${antlr}/TypeEvaluator.g"
      outputdirectory="${antlr.out}">
    </antlr>
  </target> 
  
  <target name="antlr.ExpressionEvaluator" depends="antlr.TypeEvaluator">
    <antlr 
      target="${antlr}/ExpressionEvaluator.g"
      outputdirectory="${antlr.out}">
    </antlr>
  </target> 
  
  <target name="antlr.DocComment">
    <antlr 
      target="${antlr}/DocComment.g"
      outputdirectory="${antlr.out}">
    </antlr>
  </target> 
  
  <target name="antlr.DataScriptEmitter" depends="antlr.DatascriptParser">
    <antlr 
      target="${antlr}/DataScriptEmitter.g"
      outputdirectory="${antlr.out}">
    </antlr>
  </target> 
  
  <target name="antlr" depends="antlr.ExpressionEvaluator, antlr.DocComment, antlr.DataScriptEmitter">
  </target>

  
  <target name="jet" depends="prepare" unless="jet.uptodate">
    <jetc destdir="${gen}">
      <fileset dir="${basedir}" includes="jet/java/*.*jet jet/html/*.htmljet"/>
    </jetc>
    <touch file="${jet.timestamp}"/>
  </target>

  
  
  <target name="compile" depends="prepare, antlr, jet" description="Compiles all project files">
    <javac destdir="${classes}" debug="on">
      <classpath>
        <pathelement path="${classes}"/>
        <pathelement path="lib"/>
      </classpath>
      <src path="${src}" />
      <src path="${gen}" />
    </javac>
  </target>

  <target name="jar" depends="compile" description="Builds the distribution jar file (default)">
    <jar destfile="${jar}/datascript.jar"
      basedir="${classes}"
      manifest="${src}/Manifest.txt"
      includes="**" />
  </target>
  
  
  <target name="test.gen" depends="jar" description="Generates parser for test cases"  unless="bits.uptodate">
    <java jar="${jar}/datascript.jar" dir="${test}" failonerror="true" fork="yes">
        <classpath>
          <pathelement path="${gen}"/>
          <pathelement path="${lib}/antlr.jar"/>
        </classpath>
      <arg line="-pkg bits bits.ds"/>
    </java>
  </target>
          
  <target name="test.compile" depends="test.gen, jar, check.junit" description="Builds the test cases">
    <javac destdir="${build}/test/classes" debug="on">
      <classpath>
        <pathelement path="${jar}/datascript.jar"/>
      </classpath>
        <src path="${build}/test/gen" />
        <src path="${test}" />
    </javac>
  </target>

  <target name="test.run" depends="test.compile" description="Runs the unit tests">
    <junit printsummary="no">
        <classpath>
          <pathelement path="${build}/test/classes"/>
          <pathelement path="${jar}/datascript.jar"/>
        </classpath>
       <batchtest>
         <fileset dir="${test}">
           <include name="**/*Test.java"/>      
         </fileset>       
         <formatter type="plain" usefile="false"/>
       </batchtest> 
    </junit>     
  </target>

	<target name="test.clean" description="removes all generated test Java sources and classes">
		<delete dir="${test}/bits" />
	</target>

	<target name="examples.clean" description="removes all generated test Java sources and classes">
		<delete dir="${examples}/gif" />
		<delete dir="${build}/examples/classes" />
	</target>
	  
	  
    <target name="example.gif.gen" depends="jar" description="Generates parser for examples"  unless="gif.uptodate">
        <java jar="${jar}/datascript.jar" dir="${examples}" failonerror="true" fork="yes">
            <classpath>
              <pathelement path="${gen}"/>
              <pathelement path="${lib}/antlr.jar"/>
            </classpath>
          <arg line="-pkg gif gif.ds"/>
        </java>
    </target>
    
    <target name="examples.compile" depends="example.gif.gen, jar, check.junit" description="Builds the examples">
        <javac destdir="${build}/examples/classes" debug="on">
          <classpath>
            <pathelement path="${jar}/datascript.jar"/>
          </classpath>
          <src path="${build}/examples/gen" />
          <src path="${examples}" />
        </javac>
    </target>

    <target name="example.gif.run" depends="examples.compile" description="Runs the gif-example">
        <junit printsummary="no">
            <classpath>
              <pathelement path="${build}/examples/classes"/>
              <pathelement path="${jar}/datascript.jar"/>
            </classpath>
           <batchtest>
             <fileset dir="${examples}">
               <include name="**/GifTest.java"/>
             </fileset>       
             <formatter type="plain" usefile="false"/>
           </batchtest> 
        </junit>     
    </target>

</project>
