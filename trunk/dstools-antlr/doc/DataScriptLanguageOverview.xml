<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">
<article>
  <title>DataScript Language Overview</title>

  <articleinfo>
    <author>
      <firstname>Harald</firstname>

      <surname>Wellmann</surname>

      <email>HWellmann@harmanbecker.com</email>
    </author>

    <affiliation>
      <orgname>Harman/Becker Automotive Systems</orgname>
    </affiliation>

    <revhistory>
      <revision>
        <revnumber>0.1</revnumber>

        <date>20 July 2006</date>

        <revdescription>
          <para>Initial version.</para>
        </revdescription>
      </revision>

      <revision>
        <revnumber>0.2</revnumber>

        <date>16 November 2006</date>

        <revdescription>
          <para>Added section on Comments.</para>
        </revdescription>
      </revision>

      <revision>
        <revnumber>0.3</revnumber>

        <date>3 December 2006</date>

        <revdescription>
          <para>Added section on Packages and Imports.</para>
        </revdescription>
      </revision>

      <revision>
        <revnumber>0.4</revnumber>

        <date>11 January 2007</date>

        <revdescription>
          <para>Added section on Subtypes.</para>
        </revdescription>
      </revision>
    </revhistory>
  </articleinfo>

  <section>
    <title>Introduction</title>

    <para>There are thousands of languages for modelling abstract datatypes.
    For some of these, the binary representation of the defined types is
    implementation dependent and of no concern. Others do provide a binary
    encoding, but there is usually no way to retrofit an abstract
    specification to an existing binary format.</para>

    <para>DataScript <xref linkend="Back" /> is a language for modelling
    binary datatypes or bitstreams. It was designed by Godmar Back to
    unambiguously define complex binary data formats. His reference
    implementation of a DataScript compiler also includes a Java code
    generator producing Java classes which are able to read and write a binary
    stream that complies with a DataScript specification.</para>

    <para>After evaluating different data modelling languages and toolsets,
    DataScript was selected by the authors as the most promising approach for
    formally defining a car navigation database format.</para>

    <para>While Back's reference implementation <xref linkend="DataScript" />
    provided a great start, it does not fully implement the semantics
    introduced in his specification. In addition, we found that some language
    extensions were desirable to better support our specific requirements. For
    this reason, we branched off our own DataScript project from Back's
    reference implementation.</para>

    <para>The present document describes a DataScript dialect supported by our
    implementation. It is more of a User's Manual than a formal language
    specification. Some features of the original DataScript specification that
    were semantically ambiguous, not fully implemented or simply not very
    important to us have been silently suppressed. New features of our own
    have been added and are documented in this overview. Features from the
    original specification not documented here may or may not be functional,
    but we are not actively supporting them.</para>
  </section>

  <section>
    <title>Literals</title>

    <para>The DataScript syntax for literal values is similar to the Java
    syntax. There are no character literals, only string literals with the
    usual escape syntax. Integer literals can use decimal, hexadecimal, octal
    or binary notation.</para>

    <para>Examples:</para>

    <itemizedlist>
      <listitem>
        <para>Decimal: <literal>100, 4711, 255</literal></para>
      </listitem>

      <listitem>
        <para>Hexadecimal: <literal>0xCAFEBABE, 0Xff</literal></para>
      </listitem>

      <listitem>
        <para>Octal: <literal>044, 0377</literal></para>
      </listitem>

      <listitem>
        <para>Binary: <literal>111b, 110b, 001B</literal></para>
      </listitem>

      <listitem>
        <para>String: <literal>"You"</literal></para>
      </listitem>
    </itemizedlist>

    <para>Hexadecimal digits and the <literal>x</literal> prefix as well as
    the <literal>b</literal> suffix for binary types are
    case-insensitive.</para>

    <para>String literals correspond to zero-terminated ASCII-encoded strings.
    Thus, the literal <literal>"You"</literal> corresponds to a sequence of 4
    bytes equal to the binary representation of the integer literal
    <literal>0x596F7500</literal>. The representation of strings which are not
    ASCII-encoded (e.g. ISO 8859-1 or UTF-8) is currently undefined and shall
    be added to a future version of DataScript.</para>
  </section>

  <section>
    <title>Base Types</title>

    <section>
      <title>Integer Base Types</title>

      <para>DataScript supports the following integer base types</para>

      <itemizedlist>
        <listitem>
          <para>Unsigned Types: <literal>uint8, uint16, uint32,
          uint64</literal></para>
        </listitem>

        <listitem>
          <para>Signed Types: <literal>int8, int16, int32,
          int64</literal></para>
        </listitem>
      </itemizedlist>

      <para>These types correspond to unsigned or signed integers represented
      as sequences of 8, 16, 32 or 64 bits, respectively. Negative values are
      represented in two's complement, i.e. the hex byte <literal>FF</literal>
      is 255 as <literal>uint8</literal> or -1 as
      <literal>int8</literal>.</para>

      <para>The default byte order is big endian. Thus, for multi-byte
      integers, the most significant byte comes first. Within each byte, the
      most significant bit comes first.</para>

      <para>Example: The byte stream <literal>02 01</literal> (hex)
      interpreted as <literal>int16</literal> has the decimal value 513. As a
      bit stream, this looks like <literal>0000 0010 0000 0001</literal>. Bit
      0 is <literal>0</literal>, bit 15 is <literal>1</literal>.</para>
    </section>

    <section>
      <title>Bit Field Types</title>

      <para>A bit field type is denoted by <literal>bit:1, bit:2</literal>,
      ... The colon must be followed by a positive integer literal, which
      indicates the length of the type in bits. The length is not limited. A
      bit field type corresponds to an unsigned integer of the given length.
      Thus, <literal>bit:16</literal> and <literal>uint16</literal> are
      equivalent.</para>

      <para>Signed bit field types are not supported.</para>

      <para>Variable length bit field types can be specified as
      <literal>bit&lt;</literal><emphasis>expr</emphasis><literal>&gt;</literal>,
      where <emphasis>expr</emphasis> is an expression of integer type to be
      evaluated at run-time.</para>
    </section>

    <section>
      <title>String Types</title>

      <para>A string type is denoted by <literal>string</literal>. It is
      represented by a zero terminated sequence of bytes.</para>
    </section>
  </section>

  <section>
    <title>Enumeration Types</title>

    <para>An enumeration type has a base type which is an integer type or a
    bit field type. The members of an enumeration have a name and a value
    which may be assigned explicitly or implicitly. A member that does not
    have an initializer gets assigned the value of its predecessor incremented
    by 1, or the value 0 if it is the first member.</para>

    <programlisting>enum bit:3 Color
{
    NONE  = 000b,
    RED   = 010b,
    BLUE,
    BLACK = 111b
};</programlisting>

    <para>In this example, <literal>BLUE</literal> has the value 3. When
    decoding a member of type <literal>Color</literal>, the decoder will read
    3 bits from the stream and report an error when the integer value of these
    3 bits is not one of 0, 2, 3 or 7.</para>

    <para>An enumeration type does not provide its own lexical scope. The
    member names are and must be unique in the enclosing scope. Thus, if
    <literal>Color</literal> is defined at global scope, other enumerations at
    global scope may not contain a member named
    <literal>NONE</literal>.</para>
  </section>

  <section>
    <title>Compound Types</title>

    <section>
      <title>Sequence Types</title>

      <para>A sequence type is the concatenation of its members. There is no
      padding or alignment between members. Example:</para>

      <programlisting>MySequence
{
    bit:4    a;
    uint8    b;
    bit:4    c;
};</programlisting>

      <para>This type has a total length of 16 bits or 2 bytes. As a bit
      stream, bits 0-3 correspond to member <literal>a</literal>, bits 4-11
      represent an unsigned integer <literal>b</literal>, followed by member
      <literal>c</literal> in bits 12-15. Note that member
      <literal>b</literal> overlaps a byte boundary, when the entire type is
      byte aligned. But <literal>MySequence</literal> may also be embedded
      into another type where it may not be byte-aligned.</para>
    </section>

    <section>
      <title>Union Types</title>

      <para>A union type corresponds to exactly one of its members, which are
      also called branches.</para>

      <programlisting>union VarCoordXY
{
    CoordXY8    coord8  : width == 8;
    CoordXY16   coord16 : width == 16;
}; </programlisting>

      <para>In this example, the union <literal>VarCoordXY</literal> has two
      branches <literal>coord8</literal> and <literal>coord16</literal>. The
      syntax of a member definition is the same as in sequence types. However,
      each member should be followed by a constraint. This is a boolean
      expression introduced by a colon. The terms involved in the constraint
      must be visible in the scope of the current type at compile time and
      must have been decoded at runtime before entering the branch.</para>

      <para>The decoding semantics of a union type is a trial-and-error
      method. The decoder tries to decode the first branch. If a constraint
      fails, it proceeds with the second branch, and so on. If all branches
      fail, a decoder error is reported for the union type.</para>

      <para>A branch without constraints will never fail, so any following
      branches will never be matched. This can be used to express a default
      branch of a union, which should be the last member.</para>
    </section>

    <section>
      <title>Constraints</title>

      <para>A constraint may be specified for any member of a compound type,
      not just for selecting a branch of a union. In a sequence type, after
      decoding a member with a constraint, the decoder checks the constraint
      and reports an error if the constraint is not satisfied.</para>

      <para>There is a shorthand syntax for a constraint that tests a field
      for equality. <emphasis>Type fieldName <literal>=</literal>
      expr</emphasis><literal>;</literal> is equivalent to <emphasis>Type
      fieldName <literal>:</literal> fieldName <literal>==</literal>
      expr</emphasis><literal>;</literal></para>
    </section>

    <section>
      <title>Optional Members</title>

      <para>A sequence type may have optional members:</para>

      <programlisting>ItemCount
{
    uint8    count8;
    uint16   count16  if count8 == 0xFF;
};</programlisting>

      <para>An optional member has an <literal>if</literal> clause with a
      boolean expression. The member will be decoded only if the expression
      evaluates to true at run-time.</para>

      <para>Optional members are a more compact and convenient alternative to
      a union with two branches one of which is empty.</para>
    </section>
  </section>

  <section>
    <title>Array Types</title>

    <section>
      <title>Fixed and Variable Length Arrays</title>

      <para>An array type is like a sequence of members of the same type. The
      element type may be any other type, except an array type. (Two
      dimensional arrays can be emulated by wrapping the element type in a
      sequence type.)</para>

      <para>The length of an array is the number of elements, which may be
      fixed (i.e. set at compile-time) or variable (set at run-time). The
      elements of an array have indices ranging from 0 to
      <emphasis>n</emphasis>-1, where n is the array length.</para>

      <para>The notation for array types and elements is similar to C:</para>

      <programlisting>ArrayExample
{
    uint8    header[256];
    int16    numItems;
    Element  list[numItems];
};</programlisting>

      <para><literal>header</literal> is a fixed-length array of 256 bytes;
      list is an array with <emphasis>n</emphasis> elements, where
      <emphasis>n</emphasis> is the value of <literal>numItems</literal>.
      Individual array elements may be referenced in expressions with the
      usual index notation, e.g. <literal>list[2]</literal> is the third
      element of the <literal>list</literal> array.</para>

      <para>Constraints on all elements of an array can be expressed with the
      <literal>forall</literal> operator, see <xref
      linkend="forall" />.</para>
    </section>

    <section>
      <title>Implicit Length Arrays</title>

      <para>An array type may have an implicit length indicated by an empty
      pair of brackets. In this case, the decoder will continue matching
      instances of the element type until a constraints fail or the end of the
      stream is reached.</para>

      <programlisting>ImplicitArray
{
    Element    list[];
};</programlisting>

      <para>The length of the list array can be referenced as
      <literal>lengthof list</literal>, see <xref
      linkend="lengthof" />.</para>
    </section>
  </section>

  <section>
    <title>Labels and Offsets</title>

    <para>The name of a member of integral type may be used as a label on
    another member to indicate its byte offset in the enclosing
    sequence:</para>

    <programlisting>Tile
{
    TileHeader    header;
    uint32        stringOffset;
    uint16        numFeatures;

stringOffset:
    StringTable   stringTable;
};</programlisting>

    <para>In this example, the byte offset of member
    <literal>stringTable</literal> from the beginning of the
    <literal>Tile</literal> instance is given by the value of
    <literal>stringOffset</literal>.</para>

    <para>The offset of a label is relative to the enclosing sequence by
    default. If the offset is relative to some other type containing the
    current one, this is indicated by a global label, where the type name is
    used as a prefix, followed by a double colon:</para>

    <programlisting>Database
{
    uint32    numTiles;
    Tile      tiles[numTiles];
};

Tile
{
    TileHeader    header;
    uint32        stringOffset;
    uint16        numFeatures;

Database::stringOffset:
    StringTable   stringTable;
};</programlisting>
  </section>

  <section>
    <title>Expressions</title>

    <para>The semantics of expression and the precedence rules for operators
    is the same as in Java, except where stated otherwise. DataScript has a
    number of special operators <literal>sizeof, lengthof, is</literal> and
    <literal>forall</literal> that will be explained in detail below.</para>

    <para>The following Java operators have no counterpart in DataScript:
    <literal>++, --, &gt;&gt;&gt;, instanceof</literal>.</para>

    <section>
      <title>Binary Operators</title>

      <section>
        <title>Arithmetic Operators</title>

        <para>The integer arithmetic operations include <literal>+</literal>
        (addition), <literal>-</literal> (subtraction), <literal>*</literal>
        (multiplication), <literal>/</literal> (division),
        <literal>%</literal> (modulo). In addition, there are the shift
        operators <literal>&lt;&lt;</literal> and
        <literal>&gt;&gt;</literal>.</para>
      </section>

      <section>
        <title>Relational Operators</title>

        <para>There are the following relational operators for integer
        expressions: <literal>==</literal> (equal to), <literal>!=</literal>
        (not equal to), <literal>&lt;</literal> (less than),
        <literal>&lt;</literal> (less than or equal), <literal>&gt;</literal>
        (greater than), <literal>&gt;=</literal> (greater than or
        equal).</para>

        <para>The equality operators <literal>==</literal> and
        <literal>!=</literal> may be applied to any type</para>
      </section>

      <section>
        <title>Boolean operators</title>

        <para>The boolean operators <literal>&amp;&amp;</literal> (and) and
        <literal>||</literal> (or) may be applied to boolean
        expressions.</para>
      </section>

      <section>
        <title>Bit operators</title>

        <para>The bit operators <literal>&amp;</literal> (bitwise and),
        <literal>|</literal> (bitwise or), <literal>^</literal> (bitwise
        exclusive or) may be applied to integer types.</para>
      </section>

      <section>
        <title>Assignment operators</title>

        <para>The assignment operator <literal>=</literal> and the combined
        assignment operators <literal>*=, /=, %=, +=, -=, &lt;&lt;=,
        &gt;&gt;=, &amp;=, ^=, |=</literal> have the usual semantics.</para>
      </section>

      <section>
        <title>Comma operator</title>

        <para>The comma operator <literal>,</literal> evaluates to the
        expression on the right hand side.</para>
      </section>

      <section>
        <title>Postfix operators</title>

        <para>The postfix operators include <literal>[]</literal> (array
        index), <literal>()</literal> (instantiation with argument list), and
        <literal>.</literal> (member access).</para>
      </section>
    </section>

    <section>
      <title>Unary Operators</title>

      <section>
        <title>Boolean Negation</title>

        <para>The negation operator <literal>!</literal> is defined for
        boolean expressions.</para>
      </section>

      <section>
        <title>Integer operators</title>

        <para>For integer expressions, there are <literal>+</literal> (unary
        plus), <literal>-</literal> (unary minus) and <literal>~</literal>
        (bitwise complement).</para>
      </section>

      <section>
        <title>sizeof Operator</title>

        <para>The <literal>sizeof</literal> operator returns the size of a
        type or an expression in bytes. <literal>sizeof</literal> may not be
        used, when the size in bits is not divisible by 8. When
        <literal>sizeof</literal> is applied to a type name, the size of the
        type must be fixed and known at compile time. When
        <literal>sizeof</literal> is a applied to a member, it refers to the
        actual size of the member after decoding.</para>
      </section>

      <section id="lengthof">
        <title>lengthof Operator</title>

        <para>The <literal>lengthof</literal> operator may be applied to an
        array member and returns the actual length (i.e. number of elements of
        an array.Thus, given <literal>int32 a[5]</literal>, the expression
        <literal>lengthof a</literal> evaluates to 5. This is not particularly
        useful for fixed or variable length arrays, but it is the only way to
        refer to the length of an implicit length array.</para>
      </section>

      <section>
        <title>is Operator</title>

        <para>The <literal>is</literal> operator can be applied to two field
        names, e.g. <literal>x is y</literal>. <literal>x</literal> must be a
        member of union type, and <literal>y</literal> must be one of the
        branch names of that union. The expression is true if and only if the
        decoder has selected branch y for the union.</para>
      </section>
    </section>

    <section>
      <title>Ternary Operators</title>

      <section>
        <title>Conditional Expression</title>

        <para>A conditional expression <emphasis>booleanExpr</emphasis> ?
        <emphasis>expr1</emphasis> : <emphasis>expr2</emphasis> has the value
        of <emphasis>expr1</emphasis> when <emphasis>booleanExpr</emphasis> is
        true. Otherwise, it has the value of
        <emphasis>expr2</emphasis>.</para>
      </section>

      <section id="forall">
        <title>Quantified Expression</title>

        <para>A quantified expression has the form <literal>forall</literal>
        <emphasis>indexIdentifier</emphasis> <literal>in</literal>
        <emphasis>arrayExpr</emphasis> <literal>:</literal>
        <emphasis>booleanExpr</emphasis>. The quantified expression is true if
        and only if the <emphasis>booleanExpr</emphasis> is true for all
        indices of the array. This is only useful when the boolean expression
        after the colon involves the array expression and the index identifier
        from the left hand side.</para>

        <para>Example: The constraint</para>

        <programlisting>forall i in a : (i == 0) || (a[i] == a[i-1]+1) </programlisting>

        <para>means the elements of <literal>a</literal> are a sequence of
        consecutive integers.</para>
      </section>
    </section>

    <section>
      <title>Operator Precedence</title>

      <para>In the following list, operators are grouped by precedence in
      ascending order. Operators on the bottom line have the highest
      precedence and are evaluated first. All operators on the same line have
      the same precedence and are evaluated left to right, except assignment
      operators which are evaluated right to left.</para>

      <itemizedlist>
        <listitem>
          <para>comma</para>
        </listitem>

        <listitem>
          <para>assignment</para>
        </listitem>

        <listitem>
          <para><literal>forall</literal></para>
        </listitem>

        <listitem>
          <para><literal>? :</literal></para>
        </listitem>

        <listitem>
          <para><literal>||</literal></para>
        </listitem>

        <listitem>
          <para><literal>&amp;&amp;</literal></para>
        </listitem>

        <listitem>
          <para><literal>|</literal></para>
        </listitem>

        <listitem>
          <para><literal>^</literal></para>
        </listitem>

        <listitem>
          <para><literal>&amp;</literal></para>
        </listitem>

        <listitem>
          <para><literal>== !=</literal></para>
        </listitem>

        <listitem>
          <para><literal>&lt; &gt; &lt;= &gt;=</literal></para>
        </listitem>

        <listitem>
          <para><literal>&lt;&lt; &gt;&gt;</literal></para>
        </listitem>

        <listitem>
          <para><literal>+ -</literal></para>
        </listitem>

        <listitem>
          <para><literal>* / %</literal></para>
        </listitem>

        <listitem>
          <para>cast</para>
        </listitem>

        <listitem>
          <para>unary <literal>+ - ~ !</literal></para>
        </listitem>

        <listitem>
          <para><literal>sizeof lengthof</literal></para>
        </listitem>

        <listitem>
          <para><literal>[] () . is</literal></para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section id="nested">
    <title>Nested Types</title>

    <para>DataScript syntax permits the definition of nested types, however,
    it is not easy to define the semantics of such types in a consistent way.
    For the time being, the only supported use is a sequence type definition
    within a sequence or union field definition, or a union type definition
    within a sequence field definition, and even this should be avoided in
    favour of a reference to a type defined at global scope. Example:</para>

    <programlisting>VarCoord
{
    uint8        width;
    union 
    {
        {
            int16    x;
            int16    y;
        } coord16 : width == 16;
        {
            int32    x;
            int32    y;
        } coord32 : width == 32;
    } coord;
};</programlisting>

    <para>The sequence type <literal>VarCoord</literal> contains the member
    <literal>coord</literal> which has a nested union type definition. This
    union type has two members each of which is a nested sequence type. All
    nested types in this example are anonymous, but this it not
    necessary.</para>

    <para>The nested type definitions can be avoided as follows:</para>

    <programlisting>VarCoord
{
    uint8    width;
    Coords   coords;
};

union Coords
{
    Coord16    coord16 : VarCoord.width == 16;
    Coord32    coord32 : VarCoord.width == 32;
};

Coord16
{
    int16    x;
    int16    y;
};

Coord32
{
    int32    x;
    int32    y;
};</programlisting>

    <para>Note that the constraints for the members of the
    <literal>Coords</literal> union refer to the containing type
    <literal>VarCoord</literal>. This is explained in more detail in the
    following section.</para>
  </section>

  <section>
    <title>Member Access and Contained Types</title>

    <para>The dot operator can be used to access a member of a compound type:
    the expression <emphasis>f</emphasis>.<emphasis>m</emphasis> is valid
    if</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>f</emphasis> is a field of a compound type
        <emphasis>C</emphasis></para>
      </listitem>

      <listitem>
        <para>The type <emphasis>T</emphasis> of <emphasis>f</emphasis> is a
        compound type.</para>
      </listitem>

      <listitem>
        <para><emphasis>T</emphasis> has a member named
        <emphasis>m</emphasis>.</para>
      </listitem>
    </itemizedlist>

    <para>The value of the expression <emphasis>f.m</emphasis> can be
    evaluated at run-time only if the member <emphasis>f</emphasis> has been
    evaluated before.</para>

    <para>There is a second use of the dot operator involving a type
    name:</para>

    <para>At run-time, each compound type <emphasis>C</emphasis> (except the
    root type) is contained in a type <emphasis>P</emphasis> which has a
    member of type <emphasis>C</emphasis> which is currently being decoded.
    Within the scope of <emphasis>C</emphasis>, members of the parent type
    <emphasis>P</emphasis> may be referenced using the dot operator
    <emphasis>P.m</emphasis>.</para>

    <para>The containment relation is extended recursively: If
    <emphasis>C</emphasis> is contained in <emphasis>P</emphasis> and
    <emphasis>P</emphasis> is contained in <emphasis>Q</emphasis>, then
    <emphasis>Q.m</emphasis> is a valid expression in the scope of
    <emphasis>C</emphasis>, denoting the member <emphasis>m</emphasis> of the
    containing type <emphasis>Q</emphasis>.</para>

    <para>Example:</para>

    <programlisting>Header
{
    uint32    version;
    uint16    numItems;
};


Message
{
    Header    h;
    Item      items[h.numItems];
};

Item
{
    uint16    p;
    uint32    q if Message.h.version &gt;= 10;
};</programlisting>

    <para>Within the scope of the <literal>Message</literal> type,
    <literal>header</literal> refers to the field of type
    <literal>Header</literal>, and <literal>header.numItems</literal> is a
    member of that type. Within the scope of the <literal>Item</literal> type,
    the names <literal>h</literal> or <literal>Header</literal> are not
    defined. But <literal>Item</literal> is contained in the Message type, and
    <literal>h</literal> is a member of <literal>Message</literal>, so
    <literal>Message.h</literal> is a valid expression of type
    <literal>Header</literal>, and
    <literal><literal>Message.h</literal>.version</literal> references the
    <literal>version</literal> member of the <literal>Header</literal>
    type.</para>
  </section>

  <section>
    <title>Parameterized Types</title>

    <para>The definition of a compound type may be augmented with a parameter
    list, similar to a parameter list in a Java method declaration. Each item
    of the parameter list has a type and a name. Within the body of the
    compound type definition, parameter names may be used as expressions of
    the corresponding type.</para>

    <para>To use a parameterized type as a field type in another compound
    type, the parameterized type must be instantiated with an argument list
    matching the types of the parameter list.</para>

    <para>For instance, the previous example can be rewritten as</para>

    <programlisting>Header
{
    uint32    version;
    uint16    numItems;
};


Message
{
    Header    h;
    Item(h)   items[h.numItems];
};

Item(Header header)
{
    uint16    p;
    uint32    q if header.version &gt;= 10;
};</programlisting>

    <para>When the element type of an array is parameterized, a special
    notation can be used to pass different arguments to each element of the
    array:</para>

    <programlisting>Database
{
    uint16                           numBlocks;
    BlockHeader                      headers[numBlocks];
    Block(headers[blocks$index])     blocks[numBlocks];
};

BlockHeader
{
    uint16 numItems;
    uint32 offset;
};

Block(BlockHeader header)
{
Database::header.offset:
    Item    items[header.numItems];
};</programlisting>

    <para><literal>blocks$index</literal> denotes the current index of the
    <literal>blocks</literal> array. The use of this expression in the
    argument list for the <literal>Block</literal> reference indicates that
    the i-th element of the <literal>blocks</literal> array is of type
    <literal>Block</literal> instantiated with the i-th header
    <literal>headers[i]</literal>.</para>
  </section>

  <section>
    <title>Subtypes</title>

    <para>A subtype definition defines a new name for a given type, optionally
    in combination with a constraint. When the constraint is omitted, this is
    rather like a <literal>typedef</literal> in C:</para>

    <programlisting>subtype uint16  BlockIndex;


Block
{
    BlockIndex    index;
    BlockData     data;
};</programlisting>

    <para>A constraint in the subtype definition is, as usual, a boolean
    expression introduced by a colon which may contain the keyword
    <literal>this</literal> to refer to the current type:</para>

    <programlisting>subtype uint16 BlockIndex : 1 &lt;= this &amp;&amp; this &lt; 1024;</programlisting>

    <para>Subtype constraints will be checked by the decoder for every
    occurrence of the given subtype in a field definition.</para>

    <remark>Implementation note: Subtypes were introduced in version rds 0.7.
    Subtype constraints are not yet implemented.</remark>
  </section>

  <section>
    <title>Comments</title>

    <section>
      <title>Standard Comments</title>

      <para>DataScript supports the standard comment syntax of Java or C++.
      Single line comments start with <literal>//</literal> and extend to the
      end of the line. A comments starting with <literal>/*</literal> is
      terminated by the next occurrence of <literal>*/</literal>, which may or
      may not be on the same line.</para>

      <programlisting>// This is a single-line comment.


/* This is an example
   of a multi-line comment
   spanning three lines. */</programlisting>
    </section>

    <section>
      <title>Documentation Comments</title>

      <para>To support inline documentation within a DataScript module,
      multi-line comments starting with <literal>/**</literal> are treated as
      special documentation comments. The idea and syntax are borrowed from
      Java(doc). A documentation comment is associated to the following type
      or field definition. The documentation comment and the corresponding
      definition may only be separated by whitespace.</para>

      <programlisting>/**
 * Traffic flow on links.
 */
enum bit:2 Direction
{
    /** No traffic flow allowed */
    NONE,
    /** Traffic allowed from start to end node. */
    POSITIVE,
    /** Traffic allowed from end to start node. */
    NEGATIVE,
    /** Traffic allowed in both directions. */
    BOTH
};</programlisting>

      <para>The content of a documentation comment, excluding its delimiters,
      is parsed line by line. Each line is stripped of leading whitespace, a
      sequence of asterisks (<literal>*</literal>), and more whitespace, if
      present. After stripping, a comment is composed of one or more
      paragraphs, followed by zero or more tag blocks. Paragraphs are
      separated by lines.</para>

      <para>A line starting with whitespace and a keyword preceded by an
      at-sign (<literal>@</literal>) is the beginning of a tag block and also
      indicates the end of the preceding tag block or comment
      paragraph.</para>

      <para>The only tag currently supported is <literal>@param</literal>,
      which is used for documenting the arguments of a parameterized type. The
      documentation comment should contain one <literal>@param</literal> block
      for each argument in the correct order. The <literal>@param</literal>
      tag is followed by the parameter name and the parameter description. The
      parameter name must be enclosed by whitespace.</para>

      <programlisting>/**
 * This type takes two arguments.
 * @param  arg1   The first argument.
 * @param  arg2   The second argument.
 */
ParamType(Foo arg1, Blah arg2)
{
    ...
};</programlisting>
    </section>
  </section>

  <section>
    <title>Packages and Imports</title>

    <para>Complex DataScript specifications should be split into multiple
    packages stored in separate source files. Every user-defined type belongs
    to a unique package. There is an unnamed default package used for files
    without an explicit package declaration. Types from other packages can be
    imported into the current package.</para>

    <para>The package and import syntax and semantics follow the Java
    example.</para>

    <programlisting>package map;

import common.geometry.*;
import common.featuretypes.*;</programlisting>

    <para>Package and file names are closely related. The above example
    declares a package <literal>map</literal> stored in a source file
    <literal>map.ds</literal>. The import declarations direct the parser to
    locate and parse source files <literal>common/geometry.ds</literal> and
    <literal>common/featuretypes.ds</literal> and to import
    <emphasis>all</emphasis> types from these packages into the current scope.
    Imported files may again contain import declarations.</para>

    <para>Unlike Java, DataScript cannot import individual types from another
    package (e.g. <literal>import common.geometry.Line;</literal>), nor is it
    possible to refer to an external type via its fully qualified name without
    an import declaration.</para>
  </section>

  <bibliography>
    <title>References</title>

    <bibliomixed id="Back">Godmar Back, <citetitle>DataScript - a
    Specification and Scripting Language for Binary Data</citetitle>.
    Proceedings of the ACM Conference on Generative Programming and Component
    Engineering Proceedings (GPCE 2002), published as LNCS 2487. ACM.
    Pittsburgh, PA. October 2002. pp. 66-77.
    http://www.cs.vt.edu/~gback/papers/gback-datascript-gpce2002.pdf</bibliomixed>

    <bibliomixed id="DataScript">DataScript Reference Implementation,
    http://datascript.sourceforge.net.</bibliomixed>
  </bibliography>
</article>