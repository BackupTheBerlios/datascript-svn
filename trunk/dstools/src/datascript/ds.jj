/* BSD License
 *
 * Copyright (c) 2006, Harald Wellmann, Harman/Becker Automotive Systems
 * All rights reserved.
 * 
 * This software is derived from previous work
 * Copyright (c) 2003, Godmar Back.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 * 
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 * 
 *     * Neither the name of Harman/Becker Automotive Systems or
 *       Godmar Back nor the names of their contributors may be used to
 *       endorse or promote products derived from this software without
 *       specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 
options {
    // OUTPUT_DIRECTORY = "parser";
    STATIC = false;             // javacc: non-static parser
    // NB: I don't use jjtree anymore
    // MULTI = true;            // jjtree: multi-mode parse tree
    // VISITOR = false;         // jjtree: create visitor functions
    // NODE_PREFIX = "";        // jjtree:
    // NODE_PACKAGE = "dsparser";// jjtree: 
    // NODE_FACTORY = true;     // jjtree: default false

    DEBUG_PARSER = true;
    //DEBUG_TOKEN_MANAGER = true;

    // LOOKAHEAD = 2000000000;
    // FORCE_LA_CHECK = true;   // force check lookahead even if LOOKAHEAD given
    // DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(DS)

package datascript.parser;
import java.util.*;

public class DS {
    static Hashtable slcomments = new Hashtable();
    public static void recordSingleLineComment(int ln, String cmt) {
        
        // System.out.println("Line " + ln + " <" + cmt + ">");
        slcomments.put(new Integer(ln), cmt);
    }
}

PARSER_END(DS)

SKIP : {
    " "
    |  "\t"
    |  "\n"     
    |  "\r"
}

/* COMMENTS */

SKIP : {
    <"/**" ([" ","\t"])*> : IN_FORMAL_COMMENT
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
| < <DECIMAL_LITERAL> | <HEX_LITERAL> | <OCTAL_LITERAL> | <BINARY_LITERAL> > : IN_POSSIBLE_FLOAT
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <#BINARY_LITERAL: (["0","1"])+ ["b","B"]>
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > { 
        String s = image.substring(2, image.length() - 1);
        while (s.charAt(0) == ' ') s = s.substring(1);
        DS.recordSingleLineComment(matchedToken.beginLine, s);
  } : DEFAULT
}

<IN_FORMAL_COMMENT,IN_FORMAL_COMMENT_NEXT_LINE>
SKIP :
{
  <FORMAL_COMMENT: ([" ","\r","\n"])* "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <"\n" | "\r" | "\r\n" > : IN_FORMAL_COMMENT_NEXT_LINE
} 

<IN_FORMAL_COMMENT_NEXT_LINE>
SPECIAL_TOKEN :
{
  <"\n" | "\r" | "\r\n" > 
} 

<IN_FORMAL_COMMENT_NEXT_LINE>
SKIP :
{
    <" " | "\t">
}

<IN_FORMAL_COMMENT_NEXT_LINE>
SKIP :
{
    <"*" ([" ","\t"])*> : IN_FORMAL_COMMENT
}

<IN_FORMAL_COMMENT_NEXT_LINE>
MORE :
{
    <~[]> : IN_FORMAL_COMMENT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
    <~[]>
}


<IN_MULTI_LINE_COMMENT>
SKIP :
{
  <MULTI_LINE_COMMENT: "*/" > { } : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >               // matches everything
}

TOKEN : {
    <CONST: "const"> |
    <BIG: "big"> |
    <BIT: "bit"> |
    <LITTLE: "little"> |
    <UINT8: "uint8"> |
    <UINT16: "uint16"> |
    <LEUINT16: "leuint16"> |
    <UINT32: "uint32"> |
    <LEUINT32: "leuint32"> |
    <UINT64: "uint64"> |
    <LEUINT64: "leuint64"> |
    <INT8: "int8"> |
    <INT16: "int16"> |
    <LEINT16: "leint16"> |
    <INT32: "int32"> |
    <LEINT32: "leint32"> |
    <INT64: "int64"> |
    <LEINT64: "leint64"> |
    <ENUM: "enum"> |
    <BITMASK: "bitmask"> |
    <CONDITION: "condition"> |
    <UNION: "union"> |
    <IF: "if"> |
    <SIZEOF: "sizeof"> |
    <LENGTHOF: "lengthof"> |
    <RANGE: ".."> |
    <IS: "is"> |
    <IN: "in"> |
    <FORALL: "forall"> |
    <STRING: "string">
}

TOKEN : /* OPERATORS */
{
    <PLUS: "+" > |
    <MINUS: "-" > |
    <TILDE: "~" > |
    <BANG: "!" > |
    <SHIFTLEFT: "<<" > |
    <SHIFTRIGHT: ">>" > |
    <LE: "<=" > |
    <LT: "<" > |
    <GE: ">=" > |
    <GT: ">" > |
    <EQ: "==" > |
    <NE: "!=" > |
    <MULTIPLY: "*" > |
    <DIVIDE: "/" > |
    <MODULO: "%"> |
    <XOR: "^"> |
    <AND: "&"> |
    <OR: "|"> |
    <LOGICALOR: "||"> |
    <LOGICALAND: "&&"> |
    <QUESTIONMARK: "?">
}


<IN_POSSIBLE_FLOAT>
TOKEN : {
    <".."> { 
        // make a INTEGER_LITERAL out of this token
        image.setLength(image.length() - 2); 
        matchedToken.image = image.toString();
        matchedToken.kind = INTEGER_LITERAL;
        // fake a RANGE token - very carefully, so that JTB's PrintDumper
        // won't notice
        Token t = new Token();
        t.kind = RANGE;
        t.image = "..";
        t.beginLine = matchedToken.endLine;
        t.beginColumn = matchedToken.endColumn - 1; 
        t.endLine = matchedToken.endLine;
        t.endColumn = matchedToken.endColumn;
        matchedToken.endColumn -= 2; 
        matchedToken.next = t;
    } : DEFAULT
    | <FLOATING_POINT_LITERAL: 
          "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? 
        | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? 
        |     (["0"-"9"])+  <EXPONENT>   (["f","F","d","D"])? 
        |     (["0"-"9"])+ (<EXPONENT>)?  ["f","F","d","D"]> : DEFAULT
    |  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
    |  <INTEGER_LITERAL: ~[] > { 
    /* recommended work-around for empty match after MORE; see
    http://groups.google.com/groups?selm=m0zRT5v-0003jRC%40miles.metamata.com&output=gplain
    */
            input_stream.backup(1); 
            image.setLength(image.length() - 1); 
            matchedToken.image = image.toString();
    } : DEFAULT
}

TOKEN : {
    <CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] 
        | "\\" (["n","t","b","r","f","\\","\'","\""] 
        | ["0"-"7"] (["0"-"7"])? 
        | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
    |  <STRING_LITERAL: "\"" (~["\"","\\","\n","\r"] 
        | "\\" (["n","t","b","r","f","\\","\'","\""] 
        | ["0"-"7"] (["0"-"7"])? 
        | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
}

TOKEN : {
    <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
    |  <#LETTER: ["$","A"-"Z","_","a"-"z"]>
    |  <#DIGIT: ["0"-"9"]>
}

/******************* end of TOKEN definitions *****************/

void TranslationUnit() : {}
{
    DeclarationList()
}

void DeclarationList() : {}
{
    (Declaration())*
}

void Declaration() : {}
{
      FieldDefinition() ";"
    | ConditionDefinition()
    | ConstDeclaration() ";"
}

void Label() : {}
{
     [ LOOKAHEAD(GlobalLabel()) GlobalLabel() ] Expression() ":"
}

void GlobalLabel() : {}
{
     Expression() "::"
}

/******************* begin of condition stuff *****************/
void ConditionDefinition() : {}
{
    <CONDITION> <IDENTIFIER>
    "(" [ ParameterDefinition() ("," ParameterDefinition())* ] ")" 
    "{"
        (ConditionExpression() ";")*
    "}"
}

void ParameterDefinition() : {}
{
    TypeDeclaration() <IDENTIFIER> 
}

void ConditionExpression() : {}
{
    Expression()
}

/******************* begin of enumerator stuff *****************/
void EnumDeclaration() : {}
{
    (<ENUM> | <BITMASK>) BuiltinType() [ <IDENTIFIER> ]
    "{" 
        EnumItem() ("," EnumItem())*
    "}" 
}

void EnumItem() : {}
{
    <IDENTIFIER> [ "=" ConstantExpression() ]
}

/******************* end of enumerator stuff *****************/

void ConstDeclaration() : {}
{
    <CONST> TypeDeclaration() <IDENTIFIER> "=" TypeValue()
}

void TypeValue() : {}
{
    ConstantExpression()
    | "{" TypeValueList() "}"
}

void TypeValueList() : {}
{
    TypeValue() ("," TypeValue())*
}

/****************************************************************/

void FieldDefinition() : {}
{
    [ LOOKAHEAD(Label()) Label() ]
    TypeDeclaration()
    [ TypeArgumentList() ]
    [ <IDENTIFIER> ]
    ( ArrayRange() )*
    [ FieldInitializer() ]
    [ FieldOptionalClause() ]
    [ FieldCondition() ]
}

void TypeArgumentList() : {}
{
    "(" [ FunctionArgument() ("," FunctionArgument())* ] ")"
}

void FieldInitializer() : {}
{
    "=" TypeValue()
}

void FieldOptionalClause() : {}
{
    <IF> Expression()
}

void FieldCondition() : {}
{
    ":" Expression()
}

void TypeDeclaration() : {}
{
      LOOKAHEAD([ ByteOrderModifier() ] [<UNION>] [<IDENTIFIER>] 
       ("(" ParameterDefinition() | "{"))
      StructDeclaration()
    | DefinedType()
    | EnumDeclaration()
}

void StructDeclaration() : {}
{
    [ ByteOrderModifier() ]
    [ <UNION> ]
    [ <IDENTIFIER> ]
    [ "(" ParameterDefinition() ("," ParameterDefinition())* ")" ]
    "{" DeclarationList() "}"
}

void DefinedType() : {}
{
    TypeSymbol() | BuiltinType()
}

void TypeSymbol() : {}
{
    <IDENTIFIER> (DotOperand())*
}

void BuiltinType() : {}
{
    [ ByteOrderModifier() ]
    (
         <UINT8> | <UINT16> | <UINT32> | <UINT64>
        | <INT8> | <INT16> | <INT32> | <INT64> 
        | <STRING> | BitField()
    )
}

void BitField() : {}
{
//    <BIT> ":" <INTEGER_LITERAL>
    <BIT>  ( ":" <INTEGER_LITERAL> |
             <LT> ShiftExpression() <GT> )
}

void ByteOrderModifier() : {}
{
    <BIG> | <LITTLE>
}

void ArrayRange() : {}
{
    "[" [ RangeExpression() ] "]"
}

/*********************************************************************/


void Expression() : {}
{
    AssignmentExpression() (CommaOperand())*
}

void CommaOperand() : {}
{
    "," AssignmentExpression()
}

void AssignmentExpression() : {}
{
      LOOKAHEAD(UnaryExpression() AssignmentOperator()) 
                UnaryExpression() AssignmentOperator() AssignmentExpression() 
    | LOOKAHEAD(3) QuantifiedExpression()
}

void AssignmentOperator() : {}
{
    ( "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" )
}

void QuantifiedExpression() : {}
{
    [ Quantifier() ]
    ConditionalExpression()
}

void Quantifier() : {}
{
    <FORALL> <IDENTIFIER> <IN> UnaryExpression() ":"
}

void ConditionalExpression() : {}
{
    LogicalOrExpression() [ ConditionalExpressionOperand() ]
}

void ConditionalExpressionOperand() : {}
{
    <QUESTIONMARK> Expression() ":" ConditionalExpression()
}

void ConstantExpression() : {}
{
    ConditionalExpression()
}

void RangeExpression() : {}
{
    Expression() [ UpperBoundExpression() ]
}

void UpperBoundExpression() : {}
{
    <RANGE> Expression()
}

void LogicalOrExpression() : {}
{
    LogicalAndExpression() [ LogicalOrOperand() ]
}

void LogicalOrOperand() : {}
{
    <LOGICALOR> LogicalOrExpression()
}

void LogicalAndExpression() : {}
{
    InclusiveOrExpression() [ LogicalAndOperand() ]
}

void LogicalAndOperand() : {}
{
    <LOGICALAND> LogicalAndExpression()
}

void InclusiveOrExpression() : {}
{
    ExclusiveOrExpression() [ InclusiveOrOperand() ]
}

void InclusiveOrOperand() : {}
{
    <OR> InclusiveOrExpression()
}

void ExclusiveOrExpression() : {}
{
    AndExpression() [ ExclusiveOrOperand() ]
}

void ExclusiveOrOperand() : {}
{
    <XOR> ExclusiveOrExpression()
}

void AndExpression() : {}
{
    EqualityExpression() [ AndOperand() ]
}

void AndOperand() : {}
{
    <AND> AndExpression()
}

void EqualityExpression() : {}
{
    RelationalExpression() [ EqualityOperand() ]
}

void EqualityOperand() : {}
{
    ( <EQ> | <NE> ) EqualityExpression()
}

void RelationalExpression() : {}
{
    ShiftExpression() (RelationalOperand())*
}

void RelationalOperand() : {}
{
    ( <LT> | <LE> | <GT> | <GE>) ShiftExpression()
}

void ShiftExpression() : {}
{
    AdditiveExpression() (ShiftOperand())*
}

void ShiftOperand() : {}
{
    (<SHIFTLEFT> | <SHIFTRIGHT>) AdditiveExpression()
}

void AdditiveExpression() : {}
{
    MultiplicativeExpression()  (Summand())*
}

void Summand() : {}
{
    (<PLUS> | <MINUS>) MultiplicativeExpression()
}

void MultiplicativeExpression() : {}
{
    CastExpression() (Multiplicand())*
}

void Multiplicand() : {}
{
    (<MULTIPLY> | <DIVIDE> | <MODULO>) CastExpression()
}

void CastExpression() : {}
{
      LOOKAHEAD(CastOperand()) CastOperand()
    | UnaryExpression() 
}

void CastOperand() : {}
{
    "(" DefinedType() ")" CastExpression()      
}

void UnaryExpression() : {}
{
    PostfixExpression() 
    | UnaryOperand()
    | SizeOfOperand()
    | LengthOfOperand()
}

void UnaryOperand() : {}
{
    ( <PLUS> | <MINUS> | <TILDE> | <BANG> ) CastExpression() 
}

void SizeOfOperand() : {}
{
    <SIZEOF> UnaryExpression() 
}

void LengthOfOperand() : {}
{
    <LENGTHOF> UnaryExpression() 
}

void PostfixExpression() : {}
{
    PrimaryExpression()
    ( ArrayOperand() | FunctionArgumentList() | DotOperand() | ChoiceOperand())*
}

void ChoiceOperand() : {}
{
    <IS> <IDENTIFIER>
}

void ArrayOperand() : {}
{
    "[" Expression() "]" 
}

void FunctionArgumentList() : {}
{
    "(" [ FunctionArgument() ("," FunctionArgument())* ] ")"
}

void DotOperand() : {}
{
    "." <IDENTIFIER> 
}

void PrimaryExpression() : {}
{
    VariableName()
    | Constant() 
    | ParenthesizedExpression()
}

void ParenthesizedExpression() : {}
{
    "(" Expression() ")"
}

void VariableName() : {}
{
    <IDENTIFIER>
}

void FunctionArgument() : {}
{
    AssignmentExpression()
}

void Constant() : {}
{
    <INTEGER_LITERAL> 
    | <FLOATING_POINT_LITERAL> 
        { throw new ParseException("floating point not supported"); }
    | <CHARACTER_LITERAL> 
        { throw new ParseException("character literals not supported"); }
    | <STRING_LITERAL>
}
