<project name="datascript" default="all" basedir=".">

  <property name="build" value="${basedir}/build"/>
  <property name="src" value="${basedir}/src"/>
  <property name="test" value="${basedir}/test"/>
  <property name="reports.test" value="${basedir}/reports"/>

  <property name="examples" value="${basedir}/examples"/>

  <property name="gen" value="${build}/gen"/>
  <property name="classes" value="${build}/classes"/>

  <property name="jtb.main.class" value="EDU.purdue.jtb.JTB"/>
  <property name="javacc.home" value="lib"/>

  <property file="${user.home}/ant.properties"/>

 
          
  <property name="eclipse.plugins.dir" location="${eclipse.home}/plugins"/>
  
  <taskdef name="jetc" classname="ch.paranor.epla.structure.JETCTask">

    <classpath>
      <pathelement location="${basedir}/lib/jetc-task.jar"/>
      <!--fileset dir="${eclipse.plugins.dir}">
        <include name="org.eclipse.core.boot_2.1.0/boot.jar"/>
        <include name="org.eclipse.core.resources_2.1.0/resources.jar"/>
        <include name="org.eclipse.core.runtime_2.1.0/runtime.jar"/>

        <include name="org.eclipse.emf.codegen_1.1.0/runtime/codegen.jar"/>
        <include name="org.eclipse.jdt.core_2.1.0/jdtcore.jar"/>
      </fileset-->
    </classpath>
  </taskdef>
  

        
  <target name="clean">
    <delete dir="${build}"/>
  </target>

  <target name="init">
    <uptodate 
      property="jtb.uptodate" 
      srcfile="${src}/datascript/ds.jj" 
      targetfile="${gen}/datascript/jtb.jj"/>

    <uptodate 
      property="javacc.uptodate" 
      srcfile="${gen}/datascript/jtb.jj" 
      targetfile="${gen}/datascript/parser/DS.java"/>
      
    <uptodate 
       property="jet.uptodate"
       srcfile="${basedir}/jet/XmlStruct.javajet"
       targetfile="${gen}/datascript/templates/XmlStructTemplate.java">
    </uptodate>    
      
        
    <available classname="${jtb.main.class}" property="jtb.available">
      <classpath>
        <pathelement path="lib/jtb.jar"/>
      </classpath>
    </available>

    <available classname="junit.framework.Test" property="junit.available">
    </available>
  </target>

  <target name="prepare" depends="init">
    <mkdir dir="${build}" />
    <mkdir dir="${build}/test/classes" />
    <mkdir dir="${build}/test/gen" />
    <mkdir dir="${gen}" />
    <mkdir dir="${classes}" />
    <mkdir dir="${build}/test/bits/classes" />
    <mkdir dir="${build}/test/bits/gen" />
    <mkdir dir="${build}/test/gdb/classes" />
    <mkdir dir="${build}/test/gdb/gen" />
  </target>

    <target name="jet" depends="prepare" unless="jet.uptodate">

      <jetc destdir="${build}/gen">
        <fileset dir="${basedir}" includes="jet/*.*jet"/>
      </jetc>
    </target>

    <target name="check.jtb" depends="init" unless="jtb.available">
    <fail message="Java Tree builder not found. Make sure ${jtb.main.class} is in your class path."/>
  </target>

  <target name="check.javacc" unless="javacc.home">
    <fail message="Property javacc.home not set. Add a line 'javacc.home = [install dir of javacc]' to your ${user.home}/.ant.properties file."/>
  </target>

  <target name="check.junit" unless="junit.available">
    <fail message="JUnit is not available."/>
  </target>

  <target name="generate.jtb" depends="prepare, check.jtb" unless="jtb.uptodate">
    <mkdir dir="${gen}/datascript/parser"/>

    <java classname="${jtb.main.class}" dir="${gen}/datascript" fork="yes">
      <classpath>
        <pathelement path="lib/jtb.jar"/>
      </classpath>
      <arg value="-printer"/>
      <arg value="-f"/>
      <arg value="-jd"/>
      <arg value="-tk"/>
      <arg line="-p datascript"/>
      <arg line="-o jtb.jj"/>
      <arg value="${src}/datascript/ds.jj"/>
    </java>
  </target>

  <target name="generate.javacc" depends="generate.jtb, check.javacc" unless="javacc.uptodate">
    <javacc 
      target="${gen}/datascript/jtb.jj"
      outputdirectory="${gen}/datascript/parser"
      javacchome="${javacc.home}"/>
  </target>

  <target name="compile" depends="generate.javacc, jet" description="Compiles all project files">
    <javac destdir="${classes}" debug="on">
      <classpath>
        <pathelement path="${classes}"/>
        <pathelement path="lib"/>
      </classpath>
      <src path="${src}" />
      <src path="${gen}" />
    </javac>
  </target>

  <target name="jar" depends="compile" description="Builds the distribution jar file (default)">
    <jar destfile="${build}/datascript.jar"
      basedir="${classes}"
      manifest="${src}/Manifest.txt"
      includes="**" />
  </target>


  <target name="examples.classfile" depends="jar" description="Builds the classfile example">
    <mkdir dir="${build}/examples/classfile"/>
    <mkdir dir="${build}/examples/classes"/>

    <java jar="${build}/datascript.jar" dir="${examples}/classfile" failonerror="true" fork="yes">
      <arg line="-ov classfile.ds"/>
    </java>

    <javac destdir="${build}/examples/classes" debug="on">
      <classpath>
        <pathelement path="${classes}"/>
      </classpath>
      <src path="${examples}" />
      <src path="${build}/examples" />
    </javac>
  </target>


  <target name="all" depends="jar"/>

  <target name="test.uptodate" depends="jar">
    <uptodate 
      property="bits.uptodate" 
      targetfile="${build}/test/gen/bits/BitStruct.java">
      <srcfiles file="${basedir}/test/bits.ds"/>
      <srcfiles file="${build}/datascript.jar"/>    
    </uptodate>
  </target>      
        
  <target name="test.gen" depends="jar" description="Generates parser for test cases"  unless="bits.uptodate">
    <java jar="${build}/datascript.jar" dir="${test}" failonerror="true" fork="yes">
        <classpath>
          <pathelement path="${gen}"/>
        </classpath>
      <arg line="-ov -d ${build}/test/gen -xv bits.ds"/>
    </java>
  </target>
          
  <target name="test.compile" depends="test.uptodate, test.gen, gdb.gen, jar, check.junit" description="Builds the test cases">
    <javac destdir="${build}/test/classes" debug="on">
      <classpath>
        <pathelement path="${build}/datascript.jar"/>
      </classpath>
        <src path="${build}/test/gen" />
        <src path="${test}" />
    </javac>
  </target>

  <target name="test.run" depends="test.compile" description="Runs the unit tests">
    <junit printsummary="yes">
        <classpath>
                <pathelement path="${build}/test/classes"/>
                <pathelement path="${build}/datascript.jar"/>
        </classpath>
       <batchtest>
         <fileset dir="${test}">
           <include name="**/*Test.java"/>      
         </fileset>       
         <formatter type="plain" usefile="false"/>
       </batchtest> 
    </junit>     
  </target>

  <target name="gdb.uptodate" depends="jar">
    <uptodate 
      property="gdb.uptodate" 
      targetfile="${build}/test/gen/gdb/Gdb.java">
      <srcfiles file="${basedir}/test/gdb.ds"/>
      <srcfiles file="${build}/datascript.jar"/>    
    </uptodate>
  </target>      
        
  <target name="gdb.gen" depends="gdb.uptodate, jar" description="Generates parser for test cases"  unless="gdb.uptodate">
    <java jar="${build}/datascript.jar" dir="${test}" failonerror="true" fork="yes">
        <classpath>
          <pathelement path="${gen}"/>
        </classpath>
      <arg line="-ov -d ${build}/test/gen -xv gdb.ds"/>
    </java>
  </target>
          
  <target name="gdb.compile" depends="gdb.uptodate, gdb.gen, jar, check.junit" description="Builds the test cases">
    <javac destdir="${build}/test/classes" debug="on">
      <classpath>
        <pathelement path="${build}/datascript.jar"/>
      </classpath>
        <src path="${build}/test/gen" />
        <src path="${test}" />
    </javac>
  </target>

  <target name="gdb.run" depends="gdb.compile" description="Runs the unit tests">
    <junit printsummary="yes">
        <classpath>
                <pathelement path="${build}/test/classes"/>
                <pathelement path="${build}/datascript.jar"/>
        </classpath>
       <batchtest>
         <fileset dir="${test}/gdb">
           <include name="**/*Test.java"/>      
         </fileset>       
         <formatter type="plain" usefile="false"/>
       </batchtest> 
    </junit>     
  </target>
                
 
 
        
</project>
