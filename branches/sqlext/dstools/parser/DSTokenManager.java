/* Generated By:JavaCC: Do not edit this line. DSTokenManager.java */
package datascript.parser;
import java.util.*;
import datascript.syntaxtree.*;
import java.util.Vector;

public class DSTokenManager implements DSConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xa0L) != 0L || (active1 & 0x80000004L) != 0L)
            return 2;
         if ((active0 & 0x1feffffffe0000L) != 0L)
         {
            jjmatchedKind = 80;
            return 27;
         }
         return -1;
      case 1:
         if ((active0 & 0x80L) != 0L)
            return 0;
         if ((active0 & 0x16002b0000000L) != 0L)
            return 27;
         if ((active0 & 0x1e8ffd4ffe0000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 1;
            }
            return 27;
         }
         return -1;
      case 2:
         if ((active0 & 0x6086ffff20000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 80;
               jjmatchedPos = 2;
            }
            return 27;
         }
         if ((active0 & 0x188790000c0000L) != 0L)
            return 27;
         return -1;
      case 3:
         if ((active0 & 0x1e0ff7eff20000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
            return 27;
         }
         if ((active0 & 0x810000000L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active0 & 0x1e0fb54fd00000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 4;
            return 27;
         }
         if ((active0 & 0x42a0220000L) != 0L)
            return 27;
         return -1;
      case 5:
         if ((active0 & 0x1807b54a800000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
            return 27;
         }
         if ((active0 & 0x6080005500000L) != 0L)
            return 27;
         return -1;
      case 6:
         if ((active0 & 0x1807a00a800000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
            return 27;
         }
         if ((active0 & 0x1540000000L) != 0L)
            return 27;
         return -1;
      case 7:
         if ((active0 & 0x1803a000000000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 7;
            return 27;
         }
         if ((active0 & 0x4000a800000L) != 0L)
            return 27;
         return -1;
      case 8:
         if ((active0 & 0x8012000000000L) != 0L)
            return 27;
         if ((active0 & 0x10028000000000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 8;
            return 27;
         }
         return -1;
      case 9:
         if ((active0 & 0x10028000000000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 9;
            return 27;
         }
         return -1;
      case 10:
         if ((active0 & 0x20000000000L) != 0L)
            return 27;
         if ((active0 & 0x10008000000000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 10;
            return 27;
         }
         return -1;
      case 11:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 11;
            return 27;
         }
         if ((active0 & 0x8000000000L) != 0L)
            return 27;
         return -1;
      case 12:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 12;
            return 27;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 37:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 38:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000100L);
      case 40:
         return jjStopAtPos(0, 86);
      case 41:
         return jjStopAtPos(0, 88);
      case 42:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 43:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 44:
         return jjStopAtPos(0, 87);
      case 45:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 46:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 47:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0xa0L, 0x80000000L);
      case 58:
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 59:
         return jjStopAtPos(0, 83);
      case 60:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0xa00000000000000L, 0x800000000L);
      case 61:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x2400000000000000L, 0x1000000000L);
      case 63:
         return jjStopAtPos(0, 73);
      case 91:
         return jjStopAtPos(0, 92);
      case 93:
         return jjStopAtPos(0, 93);
      case 94:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000c0000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000020000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x16002b0000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x54a900000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1c8f8000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4005600000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 89);
      case 124:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000080L);
      case 125:
         return jjStopAtPos(0, 90);
      case 126:
         return jjStopAtPos(0, 55);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 0);
         break;
      case 46:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 58:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         break;
      case 60:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L);
      case 61:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 62:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x54a800000L, active1, 0L);
      case 102:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x810057c0000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4ab0000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x2002000020000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x18878000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 27);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 99);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 100);
         break;
      case 103:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4540000000L, active1, 0L);
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x18078000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2005620000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x12b0100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80a800000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 54:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 56:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 27);
         break;
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x18078000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000a800000L);
      case 109:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x540000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x5700000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 50:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 27);
         break;
      case 51:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 52:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 27);
         break;
      case 54:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 56:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 27);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8022000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000100000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000a800000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 27);
         return jjMoveStringLiteralDfa5_0(active0, 0x50540000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 50:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 27);
         break;
      case 51:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 52:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 27);
         break;
      case 54:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x18000000000L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L);
      case 102:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 27);
         break;
      case 103:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 27);
         break;
      case 108:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 27);
         break;
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x8020000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x200a800000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 50:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 27);
         break;
      case 51:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
      case 52:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 27);
         break;
      case 54:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 107:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 27);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x28000000000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 27);
         break;
      case 52:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 27);
         break;
      case 54:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 27);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x8020000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 40, 27);
         break;
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 27);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
      case 120:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 27);
         break;
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 39, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 52, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 32;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddTwoStates(29, 31);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjAddStates(3, 4);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 9:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if (curChar == 39 && kind > 78)
                     kind = 78;
                  break;
               case 12:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 13:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 10);
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 15:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 18:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 21:
                  if (curChar == 34 && kind > 79)
                     kind = 79;
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 8);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if (curChar != 48)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddTwoStates(29, 31);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 31:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(27);
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  break;
               case 7:
                  if ((0x400000004L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 9:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(9, 11);
                  break;
               case 12:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(12, 14);
                  break;
               case 20:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 29:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 32 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x8000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 13)
                     kind = 13;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x4000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 75;
            return 19;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa1_4(0x400L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, 0L, active1);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 19;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 19);
                  else if (curChar == 46)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddStates(20, 23);
                  }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddStates(24, 26);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddStates(27, 29);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(27, 29);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(24, 26);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(9, 5);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 19);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(14, 5);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 19:
                  if ((0x5000000050L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                  }
                  else if ((0x2000000020L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 5:
                  if ((0x5000000050L & l) != 0L)
                     kind = 75;
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 19 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   18, 19, 21, 9, 11, 18, 19, 23, 21, 12, 13, 15, 20, 22, 24, 11, 
   12, 15, 16, 5, 1, 2, 5, 6, 6, 7, 5, 1, 2, 5, 15, 16, 
   5, 3, 4, 8, 9, 13, 14, 17, 18, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\143\157\156\163\164", "\142\151\147", "\142\151\164", 
"\154\151\164\164\154\145", "\165\151\156\164\70", "\165\151\156\164\61\66", 
"\154\145\165\151\156\164\61\66", "\165\151\156\164\63\62", "\154\145\165\151\156\164\63\62", 
"\165\151\156\164\66\64", "\154\145\165\151\156\164\66\64", "\151\156\164\70", "\151\156\164\61\66", 
"\154\145\151\156\164\61\66", "\151\156\164\63\62", "\154\145\151\156\164\63\62", "\151\156\164\66\64", 
"\154\145\151\156\164\66\64", "\145\156\165\155", "\142\151\164\155\141\163\153", 
"\143\157\156\144\151\164\151\157\156", "\165\156\151\157\156", "\163\161\154\137\144\141\164\141\142\141\163\145", 
"\163\161\154\137\164\141\142\154\145", "\163\161\154\137\151\156\164\145\147\145\162", 
"\163\161\154\137\164\145\170\164", "\163\151\172\145\157\146", "\56\56", "\151\163", "\151\146", "\163\161\154", 
"\151\156", "\146\157\162\141\154\154", "\163\164\162\151\156\147", 
"\163\161\154\137\151\156\144\145\170", "\163\161\154\137\143\157\156\163\164\162\141\151\156\164", "\53", "\55", 
"\176", "\41", "\74\74", "\76\76", "\74\75", "\74", "\76\75", "\76", "\75\75", 
"\41\75", "\52", "\57", "\45", "\136", "\46", "\174", "\174\174", "\46\46", "\77", null, 
null, null, null, null, null, null, null, null, "\73", "\72", "\72\72", "\50", 
"\54", "\51", "\173", "\175", "\75", "\133", "\135", "\52\75", "\57\75", "\45\75", 
"\53\75", "\55\75", "\74\74\75", "\76\76\75", "\46\75", "\136\75", "\174\75", "\56", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "IN_POSSIBLE_FLOAT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 2, 3, 4, -1, -1, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 
   0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffe0001L, 0x1fffff9efffL, 
};
static final long[] jjtoSkip = {
   0xe01eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x101e0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[32];
private final int[] jjstateSet = new int[64];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public DSTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public DSTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 32; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 77)
         {
            jjmatchedKind = 77;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 13 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         String s = image.substring(2,image.length() - 1);
         while ( s.charAt(0) == ' ' )
            s = s.substring(1);
         DS.recordSingleLineComment(matchedToken.beginLine,s);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 74 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         image.setLength(image.length() - 2);
         matchedToken.image = image.toString();
         matchedToken.kind = INTEGER_LITERAL;
         Token t = new Token();
         t.kind = RANGE;
         t.image = "..";
         t.beginLine = matchedToken.endLine;
         t.beginColumn = matchedToken.endColumn - 1;
         t.endLine = matchedToken.endLine;
         t.endColumn = matchedToken.endColumn;
         matchedToken.endColumn -= 2;
         matchedToken.next = t;
         break;
      case 77 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         input_stream.backup(1);
         image.setLength(image.length() - 1);
         matchedToken.image = image.toString();
         break;
      default : 
         break;
   }
}
}
