/* Generated By:JavaCC: Do not edit this line. DSConstants.java */
package datascript.parser;

public interface DSConstants {

  int EOF = 0;
  int DECIMAL_LITERAL = 9;
  int HEX_LITERAL = 10;
  int OCTAL_LITERAL = 11;
  int BINARY_LITERAL = 12;
  int SINGLE_LINE_COMMENT = 13;
  int FORMAL_COMMENT = 14;
  int MULTI_LINE_COMMENT = 15;
  int CONST = 17;
  int BIG = 18;
  int BIT = 19;
  int LITTLE = 20;
  int UINT8 = 21;
  int UINT16 = 22;
  int LEUINT16 = 23;
  int UINT32 = 24;
  int LEUINT32 = 25;
  int UINT64 = 26;
  int LEUINT64 = 27;
  int INT8 = 28;
  int INT16 = 29;
  int LEINT16 = 30;
  int INT32 = 31;
  int LEINT32 = 32;
  int INT64 = 33;
  int LEINT64 = 34;
  int ENUM = 35;
  int BITMASK = 36;
  int CONDITION = 37;
  int UNION = 38;
  int DATABASE = 39;
  int TABLE = 40;
  int SQLINTEGER = 41;
  int SQLTEXT = 42;
  int SIZEOF = 43;
  int RANGE = 44;
  int IS = 45;
  int IF = 46;
  int SQL = 47;
  int IN = 48;
  int FORALL = 49;
  int STRING = 50;
  int INDEX = 51;
  int CONSTRAINT = 52;
  int PLUS = 53;
  int MINUS = 54;
  int TILDE = 55;
  int BANG = 56;
  int SHIFTLEFT = 57;
  int SHIFTRIGHT = 58;
  int LE = 59;
  int LT = 60;
  int GE = 61;
  int GT = 62;
  int EQ = 63;
  int NE = 64;
  int MULTIPLY = 65;
  int DIVIDE = 66;
  int MODULO = 67;
  int XOR = 68;
  int AND = 69;
  int OR = 70;
  int LOGICALOR = 71;
  int LOGICALAND = 72;
  int QUESTIONMARK = 73;
  int FLOATING_POINT_LITERAL = 75;
  int EXPONENT = 76;
  int INTEGER_LITERAL = 77;
  int CHARACTER_LITERAL = 78;
  int STRING_LITERAL = 79;
  int IDENTIFIER = 80;
  int LETTER = 81;
  int DIGIT = 82;

  int DEFAULT = 0;
  int IN_SINGLE_LINE_COMMENT = 1;
  int IN_FORMAL_COMMENT = 2;
  int IN_MULTI_LINE_COMMENT = 3;
  int IN_POSSIBLE_FLOAT = 4;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"//\"",
    "<token of kind 6>",
    "\"/*\"",
    "<token of kind 8>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 16>",
    "\"const\"",
    "\"big\"",
    "\"bit\"",
    "\"little\"",
    "\"uint8\"",
    "\"uint16\"",
    "\"leuint16\"",
    "\"uint32\"",
    "\"leuint32\"",
    "\"uint64\"",
    "\"leuint64\"",
    "\"int8\"",
    "\"int16\"",
    "\"leint16\"",
    "\"int32\"",
    "\"leint32\"",
    "\"int64\"",
    "\"leint64\"",
    "\"enum\"",
    "\"bitmask\"",
    "\"condition\"",
    "\"union\"",
    "\"sql_database\"",
    "\"sql_table\"",
    "\"sql_integer\"",
    "\"sql_text\"",
    "\"sizeof\"",
    "\"..\"",
    "\"is\"",
    "\"if\"",
    "\"sql\"",
    "\"in\"",
    "\"forall\"",
    "\"string\"",
    "\"sql_index\"",
    "\"sql_constraint\"",
    "\"+\"",
    "\"-\"",
    "\"~\"",
    "\"!\"",
    "\"<<\"",
    "\">>\"",
    "\"<=\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"==\"",
    "\"!=\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"&\"",
    "\"|\"",
    "\"||\"",
    "\"&&\"",
    "\"?\"",
    "\"..\"",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<INTEGER_LITERAL>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\";\"",
    "\":\"",
    "\"::\"",
    "\"(\"",
    "\",\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\"[\"",
    "\"]\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\".\"",
  };

}
