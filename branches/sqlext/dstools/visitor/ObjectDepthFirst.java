//
// Generated by JTB 1.2.2
//

package datascript.visitor;
import datascript.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ObjectDepthFirst implements ObjectVisitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Object visit(NodeList n, Object argu) {
      Object _ret=null;
      int _count=0;
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Object visit(NodeListOptional n, Object argu) {
      if ( n.present() ) {
         Object _ret=null;
         int _count=0;
         for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
            ((Node)e.nextElement()).accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Object visit(NodeOptional n, Object argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public Object visit(NodeSequence n, Object argu) {
      Object _ret=null;
      int _count=0;
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Object visit(NodeToken n, Object argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * <PRE>
    * declarationList -> DeclarationList()
    * </PRE>
    */
   public Object visit(TranslationUnit n, Object argu) {
      Object _ret=null;
      n.declarationList.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeListOptional -> ( Declaration() )*
    * </PRE>
    */
   public Object visit(DeclarationList n, Object argu) {
      Object _ret=null;
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> FieldDefinition() ";"
    *       | ConditionDefinition()
    *       | ConstDeclaration() ";"
    *       | SqlFieldDefinition() ";"
    * </PRE>
    */
   public Object visit(Declaration n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeOptional -> [ GlobalLabel() ]
    * expression -> Expression()
    * nodeToken -> ":"
    * </PRE>
    */
   public Object visit(Label n, Object argu) {
      Object _ret=null;
      n.nodeOptional.accept(this, argu);
      n.expression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * expression -> Expression()
    * nodeToken -> "::"
    * </PRE>
    */
   public Object visit(GlobalLabel n, Object argu) {
      Object _ret=null;
      n.expression.accept(this, argu);
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;CONDITION&gt;
    * nodeToken1 -> &lt;IDENTIFIER&gt;
    * nodeToken2 -> "("
    * nodeOptional -> [ ParameterDefinition() ( "," ParameterDefinition() )* ]
    * nodeToken3 -> ")"
    * nodeToken4 -> "{"
    * nodeListOptional -> ( ConditionExpression() ";" )*
    * nodeToken5 -> "}"
    * </PRE>
    */
   public Object visit(ConditionDefinition n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      n.nodeToken4.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeToken5.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * typeDeclaration -> TypeDeclaration()
    * nodeToken -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public Object visit(ParameterDefinition n, Object argu) {
      Object _ret=null;
      n.typeDeclaration.accept(this, argu);
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * expression -> Expression()
    * </PRE>
    */
   public Object visit(ConditionExpression n, Object argu) {
      Object _ret=null;
      n.expression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> ( &lt;ENUM&gt; | &lt;BITMASK&gt; )
    * builtinType -> BuiltinType()
    * nodeOptional -> [ &lt;IDENTIFIER&gt; ]
    * nodeToken -> "{"
    * enumItem -> EnumItem()
    * nodeListOptional -> ( "," EnumItem() )*
    * nodeToken1 -> "}"
    * </PRE>
    */
   public Object visit(EnumDeclaration n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      n.builtinType.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.enumItem.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * nodeOptional -> [ "=" ConstantExpression() ]
    * </PRE>
    */
   public Object visit(EnumItem n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;CONST&gt;
    * typeDeclaration -> TypeDeclaration()
    * nodeToken1 -> &lt;IDENTIFIER&gt;
    * nodeToken2 -> "="
    * typeValue -> TypeValue()
    * </PRE>
    */
   public Object visit(ConstDeclaration n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.typeDeclaration.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.typeValue.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> ConstantExpression()
    *       | "{" TypeValueList() "}"
    * </PRE>
    */
   public Object visit(TypeValue n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * typeValue -> TypeValue()
    * nodeListOptional -> ( "," TypeValue() )*
    * </PRE>
    */
   public Object visit(TypeValueList n, Object argu) {
      Object _ret=null;
      n.typeValue.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * sqlType -> SqlType()
    * nodeOptional -> [ &lt;IDENTIFIER&gt; ]
    * nodeSequence -> ( SqlFieldContent() )
    * nodeListOptional -> ( &lt;STRING&gt; )*
    * </PRE>
    */
   public Object visit(SqlFieldDefinition n, Object argu) {
      Object _ret=null;
      n.sqlType.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeSequence.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * sqlSyntax -> SqlSyntax()
    * nodeListOptional -> ( "," SqlSyntax() )*
    * </PRE>
    */
   public Object visit(SqlFieldContent n, Object argu) {
      Object _ret=null;
      n.sqlSyntax.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> &lt;INDEX&gt;
    *       | &lt;CONSTRAINT&gt;
    * </PRE>
    */
   public Object visit(SqlType n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeOptional -> [ Label() ]
    * typeDeclaration -> TypeDeclaration()
    * nodeOptional1 -> [ TypeArgumentList() ]
    * nodeOptional2 -> [ &lt;IDENTIFIER&gt; ]
    * nodeListOptional -> ( ArrayRange() )*
    * nodeOptional3 -> [ FieldInitializer() ]
    * nodeOptional4 -> [ FieldCondition() ]
    * nodeOptional5 -> [ SqlCondition() ]
    * nodeOptional6 -> [ FieldOptionalClause() ]
    * nodeListOptional1 -> ( &lt;STRING&gt; )*
    * </PRE>
    */
   public Object visit(FieldDefinition n, Object argu) {
      Object _ret=null;
      n.nodeOptional.accept(this, argu);
      n.typeDeclaration.accept(this, argu);
      n.nodeOptional1.accept(this, argu);
      n.nodeOptional2.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      n.nodeOptional3.accept(this, argu);
      n.nodeOptional4.accept(this, argu);
      n.nodeOptional5.accept(this, argu);
      n.nodeOptional6.accept(this, argu);
      n.nodeListOptional1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "("
    * nodeOptional -> [ FunctionArgument() ( "," FunctionArgument() )* ]
    * nodeToken1 -> ")"
    * </PRE>
    */
   public Object visit(TypeArgumentList n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "="
    * typeValue -> TypeValue()
    * </PRE>
    */
   public Object visit(FieldInitializer n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.typeValue.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;IF&gt;
    * expression -> Expression()
    * </PRE>
    */
   public Object visit(FieldOptionalClause n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.expression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> ":"
    * expression -> Expression()
    * </PRE>
    */
   public Object visit(FieldCondition n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.expression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;SQL&gt;
    * sqlSyntax -> SqlSyntax()
    * nodeListOptional -> ( "," SqlSyntax() )*
    * </PRE>
    */
   public Object visit(SqlCondition n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.sqlSyntax.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;STRING_LITERAL&gt;
    * </PRE>
    */
   public Object visit(SqlSyntax n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> StructDeclaration()
    *       | DefinedType()
    *       | EnumDeclaration()
    * </PRE>
    */
   public Object visit(TypeDeclaration n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeOptional -> [ ByteOrderModifier() ]
    * nodeOptional1 -> [ &lt;UNION&gt; | &lt;DATABASE&gt; | &lt;TABLE&gt; | &lt;SQLINTEGER&gt; | &lt;SQLTEXT&gt; ]
    * nodeOptional2 -> [ &lt;IDENTIFIER&gt; ]
    * nodeOptional3 -> [ "(" ParameterDefinition() ( "," ParameterDefinition() )* ")" ]
    * nodeToken -> "{"
    * declarationList -> DeclarationList()
    * nodeToken1 -> "}"
    * </PRE>
    */
   public Object visit(StructDeclaration n, Object argu) {
      Object _ret=null;
      n.nodeOptional.accept(this, argu);
      n.nodeOptional1.accept(this, argu);
      n.nodeOptional2.accept(this, argu);
      n.nodeOptional3.accept(this, argu);
      n.nodeToken.accept(this, argu);
      n.declarationList.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> TypeSymbol()
    *       | BuiltinType()
    * </PRE>
    */
   public Object visit(DefinedType n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * nodeListOptional -> ( DotOperand() )*
    * </PRE>
    */
   public Object visit(TypeSymbol n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeOptional -> [ ByteOrderModifier() ]
    * nodeChoice -> ( &lt;UINT8&gt; | &lt;UINT16&gt; | &lt;UINT32&gt; | &lt;UINT64&gt; | &lt;INT8&gt; | &lt;INT16&gt; | &lt;INT32&gt; | &lt;INT64&gt; | &lt;STRING&gt; | BitField() )
    * </PRE>
    */
   public Object visit(BuiltinType n, Object argu) {
      Object _ret=null;
      n.nodeOptional.accept(this, argu);
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;BIT&gt;
    * nodeChoice -> ( ":" &lt;INTEGER_LITERAL&gt; | &lt;LT&gt; ShiftExpression() &lt;GT&gt; )
    * </PRE>
    */
   public Object visit(BitField n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> &lt;BIG&gt;
    *       | &lt;LITTLE&gt;
    * </PRE>
    */
   public Object visit(ByteOrderModifier n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "["
    * nodeOptional -> [ RangeExpression() ]
    * nodeToken1 -> "]"
    * </PRE>
    */
   public Object visit(ArrayRange n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * assignmentExpression -> AssignmentExpression()
    * nodeListOptional -> ( CommaOperand() )*
    * </PRE>
    */
   public Object visit(Expression n, Object argu) {
      Object _ret=null;
      n.assignmentExpression.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> ","
    * assignmentExpression -> AssignmentExpression()
    * </PRE>
    */
   public Object visit(CommaOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.assignmentExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> UnaryExpression() AssignmentOperator() AssignmentExpression()
    *       | QuantifiedExpression()
    * </PRE>
    */
   public Object visit(AssignmentExpression n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> ( "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "&lt;&lt;=" | "&gt;&gt;=" | "&=" | "^=" | "|=" )
    * </PRE>
    */
   public Object visit(AssignmentOperator n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeOptional -> [ Quantifier() ]
    * conditionalExpression -> ConditionalExpression()
    * </PRE>
    */
   public Object visit(QuantifiedExpression n, Object argu) {
      Object _ret=null;
      n.nodeOptional.accept(this, argu);
      n.conditionalExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;FORALL&gt;
    * nodeToken1 -> &lt;IDENTIFIER&gt;
    * nodeToken2 -> &lt;IN&gt;
    * unaryExpression -> UnaryExpression()
    * nodeToken3 -> ":"
    * </PRE>
    */
   public Object visit(Quantifier n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.nodeToken2.accept(this, argu);
      n.unaryExpression.accept(this, argu);
      n.nodeToken3.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * logicalOrExpression -> LogicalOrExpression()
    * nodeOptional -> [ ConditionalExpressionOperand() ]
    * </PRE>
    */
   public Object visit(ConditionalExpression n, Object argu) {
      Object _ret=null;
      n.logicalOrExpression.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;QUESTIONMARK&gt;
    * expression -> Expression()
    * nodeToken1 -> ":"
    * conditionalExpression -> ConditionalExpression()
    * </PRE>
    */
   public Object visit(ConditionalExpressionOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.expression.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.conditionalExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * conditionalExpression -> ConditionalExpression()
    * </PRE>
    */
   public Object visit(ConstantExpression n, Object argu) {
      Object _ret=null;
      n.conditionalExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * expression -> Expression()
    * nodeOptional -> [ UpperBoundExpression() ]
    * </PRE>
    */
   public Object visit(RangeExpression n, Object argu) {
      Object _ret=null;
      n.expression.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;RANGE&gt;
    * expression -> Expression()
    * </PRE>
    */
   public Object visit(UpperBoundExpression n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.expression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * logicalAndExpression -> LogicalAndExpression()
    * nodeOptional -> [ LogicalOrOperand() ]
    * </PRE>
    */
   public Object visit(LogicalOrExpression n, Object argu) {
      Object _ret=null;
      n.logicalAndExpression.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;LOGICALOR&gt;
    * logicalOrExpression -> LogicalOrExpression()
    * </PRE>
    */
   public Object visit(LogicalOrOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.logicalOrExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * inclusiveOrExpression -> InclusiveOrExpression()
    * nodeOptional -> [ LogicalAndOperand() ]
    * </PRE>
    */
   public Object visit(LogicalAndExpression n, Object argu) {
      Object _ret=null;
      n.inclusiveOrExpression.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;LOGICALAND&gt;
    * logicalAndExpression -> LogicalAndExpression()
    * </PRE>
    */
   public Object visit(LogicalAndOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.logicalAndExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * exclusiveOrExpression -> ExclusiveOrExpression()
    * nodeOptional -> [ InclusiveOrOperand() ]
    * </PRE>
    */
   public Object visit(InclusiveOrExpression n, Object argu) {
      Object _ret=null;
      n.exclusiveOrExpression.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;OR&gt;
    * inclusiveOrExpression -> InclusiveOrExpression()
    * </PRE>
    */
   public Object visit(InclusiveOrOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.inclusiveOrExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * andExpression -> AndExpression()
    * nodeOptional -> [ ExclusiveOrOperand() ]
    * </PRE>
    */
   public Object visit(ExclusiveOrExpression n, Object argu) {
      Object _ret=null;
      n.andExpression.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;XOR&gt;
    * exclusiveOrExpression -> ExclusiveOrExpression()
    * </PRE>
    */
   public Object visit(ExclusiveOrOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.exclusiveOrExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * equalityExpression -> EqualityExpression()
    * nodeOptional -> [ AndOperand() ]
    * </PRE>
    */
   public Object visit(AndExpression n, Object argu) {
      Object _ret=null;
      n.equalityExpression.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;AND&gt;
    * andExpression -> AndExpression()
    * </PRE>
    */
   public Object visit(AndOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.andExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * relationalExpression -> RelationalExpression()
    * nodeOptional -> [ EqualityOperand() ]
    * </PRE>
    */
   public Object visit(EqualityExpression n, Object argu) {
      Object _ret=null;
      n.relationalExpression.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> ( &lt;EQ&gt; | &lt;NE&gt; )
    * equalityExpression -> EqualityExpression()
    * </PRE>
    */
   public Object visit(EqualityOperand n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      n.equalityExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * shiftExpression -> ShiftExpression()
    * nodeListOptional -> ( RelationalOperand() )*
    * </PRE>
    */
   public Object visit(RelationalExpression n, Object argu) {
      Object _ret=null;
      n.shiftExpression.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> ( &lt;LT&gt; | &lt;LE&gt; | &lt;GT&gt; | &lt;GE&gt; )
    * shiftExpression -> ShiftExpression()
    * </PRE>
    */
   public Object visit(RelationalOperand n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      n.shiftExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * additiveExpression -> AdditiveExpression()
    * nodeListOptional -> ( ShiftOperand() )*
    * </PRE>
    */
   public Object visit(ShiftExpression n, Object argu) {
      Object _ret=null;
      n.additiveExpression.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> ( &lt;SHIFTLEFT&gt; | &lt;SHIFTRIGHT&gt; )
    * additiveExpression -> AdditiveExpression()
    * </PRE>
    */
   public Object visit(ShiftOperand n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      n.additiveExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * multiplicativeExpression -> MultiplicativeExpression()
    * nodeListOptional -> ( Summand() )*
    * </PRE>
    */
   public Object visit(AdditiveExpression n, Object argu) {
      Object _ret=null;
      n.multiplicativeExpression.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> ( &lt;PLUS&gt; | &lt;MINUS&gt; )
    * multiplicativeExpression -> MultiplicativeExpression()
    * </PRE>
    */
   public Object visit(Summand n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      n.multiplicativeExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * castExpression -> CastExpression()
    * nodeListOptional -> ( Multiplicand() )*
    * </PRE>
    */
   public Object visit(MultiplicativeExpression n, Object argu) {
      Object _ret=null;
      n.castExpression.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> ( &lt;MULTIPLY&gt; | &lt;DIVIDE&gt; | &lt;MODULO&gt; )
    * castExpression -> CastExpression()
    * </PRE>
    */
   public Object visit(Multiplicand n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      n.castExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> CastOperand()
    *       | UnaryExpression()
    * </PRE>
    */
   public Object visit(CastExpression n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "("
    * definedType -> DefinedType()
    * nodeToken1 -> ")"
    * castExpression -> CastExpression()
    * </PRE>
    */
   public Object visit(CastOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.definedType.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      n.castExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> PostfixExpression()
    *       | UnaryOperand()
    *       | SizeOfOperand()
    * </PRE>
    */
   public Object visit(UnaryExpression n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> ( &lt;PLUS&gt; | &lt;MINUS&gt; | &lt;TILDE&gt; | &lt;BANG&gt; )
    * castExpression -> CastExpression()
    * </PRE>
    */
   public Object visit(UnaryOperand n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      n.castExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;SIZEOF&gt;
    * unaryExpression -> UnaryExpression()
    * </PRE>
    */
   public Object visit(SizeOfOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.unaryExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * primaryExpression -> PrimaryExpression()
    * nodeListOptional -> ( ArrayOperand() | FunctionArgumentList() | DotOperand() | ChoiceOperand() )*
    * </PRE>
    */
   public Object visit(PostfixExpression n, Object argu) {
      Object _ret=null;
      n.primaryExpression.accept(this, argu);
      n.nodeListOptional.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;IS&gt;
    * nodeToken1 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public Object visit(ChoiceOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "["
    * expression -> Expression()
    * nodeToken1 -> "]"
    * </PRE>
    */
   public Object visit(ArrayOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.expression.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "("
    * nodeOptional -> [ FunctionArgument() ( "," FunctionArgument() )* ]
    * nodeToken1 -> ")"
    * </PRE>
    */
   public Object visit(FunctionArgumentList n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeOptional.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "."
    * nodeToken1 -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public Object visit(DotOperand n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> VariableName()
    *       | Constant()
    *       | ParenthesizedExpression()
    * </PRE>
    */
   public Object visit(PrimaryExpression n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> "("
    * expression -> Expression()
    * nodeToken1 -> ")"
    * </PRE>
    */
   public Object visit(ParenthesizedExpression n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      n.expression.accept(this, argu);
      n.nodeToken1.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeToken -> &lt;IDENTIFIER&gt;
    * </PRE>
    */
   public Object visit(VariableName n, Object argu) {
      Object _ret=null;
      n.nodeToken.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * assignmentExpression -> AssignmentExpression()
    * </PRE>
    */
   public Object visit(FunctionArgument n, Object argu) {
      Object _ret=null;
      n.assignmentExpression.accept(this, argu);
      return _ret;
   }

   /**
    * <PRE>
    * nodeChoice -> &lt;INTEGER_LITERAL&gt;
    *       | &lt;FLOATING_POINT_LITERAL&gt;
    *       | &lt;CHARACTER_LITERAL&gt;
    *       | &lt;STRING_LITERAL&gt;
    * </PRE>
    */
   public Object visit(Constant n, Object argu) {
      Object _ret=null;
      n.nodeChoice.accept(this, argu);
      return _ret;
   }

}
