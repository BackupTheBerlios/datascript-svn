//
// Generated by JTB 1.2.2
//

options {
   OUTPUT_DIRECTORY = "parser";
   STATIC = false;
   DEBUG_PARSER = true;
}

PARSER_BEGIN(DS)
package datascript.parser;

import java.util.*;
import datascript.syntaxtree.*;
import java.util.Vector;


public class DS 
{
   static Hashtable slcomments = new Hashtable();
   public static void recordSingleLineComment(int ln,String cmt)
   {
      slcomments.put(new Integer(ln),cmt);
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(DS)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
}

MORE :
{
   "//" : IN_SINGLE_LINE_COMMENT
   | <"/**" ~["/"]> : IN_FORMAL_COMMENT
   | "/*" : IN_MULTI_LINE_COMMENT
   | <<DECIMAL_LITERAL> | <HEX_LITERAL> | <OCTAL_LITERAL> | <BINARY_LITERAL>> : IN_POSSIBLE_FLOAT
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <#BINARY_LITERAL: (["0", "1"])+ ["b", "B"]>
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n">
      {
         String s = image.substring(2,image.length() - 1);
         while ( s.charAt(0) == ' ' )
            s = s.substring(1);
         DS.recordSingleLineComment(matchedToken.beginLine,s);
      } : DEFAULT
}

<IN_FORMAL_COMMENT> SPECIAL_TOKEN :
{
   <FORMAL_COMMENT: "*/"> : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN :
{
   <MULTI_LINE_COMMENT: "*/">
      {
      } : DEFAULT
}

<IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT> MORE :
{
   <~[]>
}

TOKEN :
{
   <CONST: "const">
   | <BIG: "big">
   | <BIT: "bit">
   | <LITTLE: "little">
   | <UINT8: "uint8">
   | <UINT16: "uint16">
   | <LEUINT16: "leuint16">
   | <UINT32: "uint32">
   | <LEUINT32: "leuint32">
   | <UINT64: "uint64">
   | <LEUINT64: "leuint64">
   | <INT8: "int8">
   | <INT16: "int16">
   | <LEINT16: "leint16">
   | <INT32: "int32">
   | <LEINT32: "leint32">
   | <INT64: "int64">
   | <LEINT64: "leint64">
   | <ENUM: "enum">
   | <BITMASK: "bitmask">
   | <CONDITION: "condition">
   | <UNION: "union">
   | <DATABASE: "sql_database">
   | <TABLE: "sql_table">
   | <SQLINTEGER: "sql_integer">
   | <SQLTEXT: "sql_text">
   | <SIZEOF: "sizeof">
   | <RANGE: "..">
   | <IS: "is">
   | <IF: "if">
   | <SQL: "sql">
   | <IN: "in">
   | <FORALL: "forall">
   | <STRING: "string">
   | <INDEX: "sql_index">
   | <CONSTRAINT: "sql_constraint">
}

TOKEN :
{
   <PLUS: "+">
   | <MINUS: "-">
   | <TILDE: "~">
   | <BANG: "!">
   | <SHIFTLEFT: "<<">
   | <SHIFTRIGHT: ">>">
   | <LE: "<=">
   | <LT: "<">
   | <GE: ">=">
   | <GT: ">">
   | <EQ: "==">
   | <NE: "!=">
   | <MULTIPLY: "*">
   | <DIVIDE: "/">
   | <MODULO: "%">
   | <XOR: "^">
   | <AND: "&">
   | <OR: "|">
   | <LOGICALOR: "||">
   | <LOGICALAND: "&&">
   | <QUESTIONMARK: "?">
}

<IN_POSSIBLE_FLOAT> TOKEN :
{
   <"..">
      {
         image.setLength(image.length() - 2);
         matchedToken.image = image.toString();
         matchedToken.kind = INTEGER_LITERAL;
         Token t = new Token();
         t.kind = RANGE;
         t.image = "..";
         t.beginLine = matchedToken.endLine;
         t.beginColumn = matchedToken.endColumn - 1;
         t.endLine = matchedToken.endLine;
         t.endColumn = matchedToken.endColumn;
         matchedToken.endColumn -= 2;
         matchedToken.next = t;
      } : DEFAULT
   | <FLOATING_POINT_LITERAL: "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]> : DEFAULT
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <INTEGER_LITERAL: ~[]>
      {
         input_stream.backup(1);
         image.setLength(image.length() - 1);
         matchedToken.image = image.toString();
      } : DEFAULT
}

TOKEN :
{
   <CHARACTER_LITERAL: "\'" (~["\'", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
   | <STRING_LITERAL: "\"" (~["\"", "\\", "\n", "\r"] | "\\" (["n", "t", "b", "r", "f", "\\", "\'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
   | <#LETTER: ["A"-"Z", "_", "a"-"z"]>
   | <#DIGIT: ["0"-"9"]>
}

TranslationUnit TranslationUnit() :
{
   DeclarationList n0;

   {
   }
}
{
   n0=DeclarationList()
   
   { return new TranslationUnit(n0); }
}

DeclarationList DeclarationList() :
{
   NodeListOptional n0 = new NodeListOptional();
   Declaration n1;

   {
   }
}
{
   (
      n1=Declaration()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new DeclarationList(n0); }
}

Declaration Declaration() :
{
   NodeChoice n0;
   NodeSequence n1;
   FieldDefinition n2;
   NodeToken n3;
   Token n4;
   ConditionDefinition n5;
   NodeSequence n6;
   ConstDeclaration n7;
   NodeToken n8;
   Token n9;
   NodeSequence n10;
   SqlFieldDefinition n11;
   NodeToken n12;
   Token n13;

   {
   }
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=FieldDefinition()
      { n1.addNode(n2); }
      n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n5=ConditionDefinition()
      { n0 = new NodeChoice(n5, 1); }
   |
      { n6 = new NodeSequence(2); }
      n7=ConstDeclaration()
      { n6.addNode(n7); }
      n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
      { n6.addNode(n8); }
      { n0 = new NodeChoice(n6, 2); }
   |
      { n10 = new NodeSequence(2); }
      n11=SqlFieldDefinition()
      { n10.addNode(n11); }
      n13=";" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n10.addNode(n12); }
      { n0 = new NodeChoice(n10, 3); }
   )
   
   { return new Declaration(n0); }
}

Label Label() :
{
   NodeOptional n0 = new NodeOptional();
   GlobalLabel n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      LOOKAHEAD(GlobalLabel())
      n1=GlobalLabel()
      { n0.addNode(n1); }
   )?
   n2=Expression()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new Label(n0,n2,n3); }
}

GlobalLabel GlobalLabel() :
{
   Expression n0;
   NodeToken n1;
   Token n2;

   {
   }
}
{
   n0=Expression()
   n2="::" { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new GlobalLabel(n0,n1); }
}

ConditionDefinition ConditionDefinition() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   ParameterDefinition n8;
   NodeListOptional n9;
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   ParameterDefinition n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeListOptional n18 = new NodeListOptional();
   NodeSequence n19;
   ConditionExpression n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;

   {
   }
}
{
   n1=<CONDITION> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      { n9 = new NodeListOptional(); }
      { n7 = new NodeSequence(2); }
      n8=ParameterDefinition()
      { n7.addNode(n8); }
      (
         { n10 = new NodeSequence(2); }
         n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
         n13=ParameterDefinition()
         { n10.addNode(n13); }
         { n9.addNode(n10); }
      )*
      { n9.nodes.trimToSize(); }
      { n7.addNode(n9); }
      { n6.addNode(n7); }
   )?
   n15=")" { n14 = JTBToolkit.makeNodeToken(n15); }
   n17="{" { n16 = JTBToolkit.makeNodeToken(n17); }
   (
      { n19 = new NodeSequence(2); }
      n20=ConditionExpression()
      { n19.addNode(n20); }
      n22=";" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n19.addNode(n21); }
      { n18.addNode(n19); }
   )*
   { n18.nodes.trimToSize(); }
   n24="}" { n23 = JTBToolkit.makeNodeToken(n24); }
   
   { return new ConditionDefinition(n0,n2,n4,n6,n14,n16,n18,n23); }
}

ParameterDefinition ParameterDefinition() :
{
   TypeDeclaration n0;
   NodeToken n1;
   Token n2;

   {
   }
}
{
   n0=TypeDeclaration()
   n2=<IDENTIFIER> { n1 = JTBToolkit.makeNodeToken(n2); }
   
   { return new ParameterDefinition(n0,n1); }
}

ConditionExpression ConditionExpression() :
{
   Expression n0;

   {
   }
}
{
   n0=Expression()
   
   { return new ConditionExpression(n0); }
}

EnumDeclaration EnumDeclaration() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   BuiltinType n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   EnumItem n11;
   NodeListOptional n12 = new NodeListOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   EnumItem n16;
   NodeToken n17;
   Token n18;

   {
   }
}
{
   (
      (
         n2=<ENUM> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<BITMASK> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=BuiltinType()
   (
      n8=<IDENTIFIER> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )?
   n10="{" { n9 = JTBToolkit.makeNodeToken(n10); }
   n11=EnumItem()
   (
      { n13 = new NodeSequence(2); }
      n15="," { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      n16=EnumItem()
      { n13.addNode(n16); }
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   n18="}" { n17 = JTBToolkit.makeNodeToken(n18); }
   
   { return new EnumDeclaration(n0,n5,n6,n9,n11,n12,n17); }
}

EnumItem EnumItem() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   ConstantExpression n6;

   {
   }
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="=" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=ConstantExpression()
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   
   { return new EnumItem(n0,n2); }
}

ConstDeclaration ConstDeclaration() :
{
   NodeToken n0;
   Token n1;
   TypeDeclaration n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   TypeValue n7;

   {
   }
}
{
   n1=<CONST> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TypeDeclaration()
   n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="=" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=TypeValue()
   
   { return new ConstDeclaration(n0,n2,n3,n5,n7); }
}

TypeValue TypeValue() :
{
   NodeChoice n0;
   ConstantExpression n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   TypeValueList n5;
   NodeToken n6;
   Token n7;

   {
   }
}
{
   (
      n1=ConstantExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(3); }
      n4="{" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=TypeValueList()
      { n2.addNode(n5); }
      n7="}" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new TypeValue(n0); }
}

TypeValueList TypeValueList() :
{
   TypeValue n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   TypeValue n5;

   {
   }
}
{
   n0=TypeValue()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=TypeValue()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new TypeValueList(n0,n1); }
}

SqlFieldDefinition SqlFieldDefinition() :
{
   SqlType n0;
   NodeOptional n1 = new NodeOptional();
   NodeToken n2;
   Token n3;
   NodeSequence n4;
   SqlFieldContent n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n0=SqlType()
   (
      n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
   )?
   (
      { n4 = new NodeSequence(1); }
      n5=SqlFieldContent()
      { n4.addNode(n5); }
      
   )
   (
      n8=<STRING> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   
   { return new SqlFieldDefinition(n0,n1,n4,n6); }
}

SqlFieldContent SqlFieldContent() :
{
   SqlSyntax n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SqlSyntax n5;

   {
   }
}
{
   n0=SqlSyntax()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SqlSyntax()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new SqlFieldContent(n0,n1); }
}

SqlType SqlType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2=<INDEX> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<CONSTRAINT> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new SqlType(n0); }
}

FieldDefinition FieldDefinition() :
{
   NodeOptional n0 = new NodeOptional();
   Label n1;
   TypeDeclaration n2;
   NodeOptional n3 = new NodeOptional();
   TypeArgumentList n4;
   NodeOptional n5 = new NodeOptional();
   NodeToken n6;
   Token n7;
   NodeListOptional n8 = new NodeListOptional();
   ArrayRange n9;
   NodeOptional n10 = new NodeOptional();
   FieldInitializer n11;
   NodeOptional n12 = new NodeOptional();
   FieldCondition n13;
   NodeOptional n14 = new NodeOptional();
   SqlCondition n15;
   NodeOptional n16 = new NodeOptional();
   FieldOptionalClause n17;
   NodeListOptional n18 = new NodeListOptional();
   NodeToken n19;
   Token n20;

   {
   }
}
{
   (
      LOOKAHEAD(Label())
      n1=Label()
      { n0.addNode(n1); }
   )?
   n2=TypeDeclaration()
   (
      n4=TypeArgumentList()
      { n3.addNode(n4); }
   )?
   (
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
   )?
   (
      n9=ArrayRange()
      { n8.addNode(n9); }
   )*
   { n8.nodes.trimToSize(); }
   (
      n11=FieldInitializer()
      { n10.addNode(n11); }
   )?
   (
      n13=FieldCondition()
      { n12.addNode(n13); }
   )?
   (
      n15=SqlCondition()
      { n14.addNode(n15); }
   )?
   (
      n17=FieldOptionalClause()
      { n16.addNode(n17); }
   )?
   (
      n20=<STRING> { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
   )*
   { n18.nodes.trimToSize(); }
   
   { return new FieldDefinition(n0,n2,n3,n5,n8,n10,n12,n14,n16,n18); }
}

TypeArgumentList TypeArgumentList() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   FunctionArgument n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   FunctionArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeListOptional(); }
      { n3 = new NodeSequence(2); }
      n4=FunctionArgument()
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=FunctionArgument()
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new TypeArgumentList(n0,n2,n10); }
}

FieldInitializer FieldInitializer() :
{
   NodeToken n0;
   Token n1;
   TypeValue n2;

   {
   }
}
{
   n1="=" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TypeValue()
   
   { return new FieldInitializer(n0,n2); }
}

FieldOptionalClause FieldOptionalClause() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   {
   }
}
{
   n1=<IF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new FieldOptionalClause(n0,n2); }
}

FieldCondition FieldCondition() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   {
   }
}
{
   n1=":" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new FieldCondition(n0,n2); }
}

SqlCondition SqlCondition() :
{
   NodeToken n0;
   Token n1;
   SqlSyntax n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   SqlSyntax n7;

   {
   }
}
{
   n1=<SQL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SqlSyntax()
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=SqlSyntax()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new SqlCondition(n0,n2,n3); }
}

SqlSyntax SqlSyntax() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<STRING_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new SqlSyntax(n0); }
}

TypeDeclaration TypeDeclaration() :
{
   NodeChoice n0;
   StructDeclaration n1;
   DefinedType n2;
   EnumDeclaration n3;

   {
   }
}
{
   (
      LOOKAHEAD([ ByteOrderModifier() ] [ <UNION> | <DATABASE> | <TABLE> | <SQLINTEGER> | <SQLTEXT> ] [ <IDENTIFIER> ] ( "(" ParameterDefinition() | "{" ))
      n1=StructDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=DefinedType()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=EnumDeclaration()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new TypeDeclaration(n0); }
}

StructDeclaration StructDeclaration() :
{
   NodeOptional n0 = new NodeOptional();
   ByteOrderModifier n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14 = new NodeOptional();
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   NodeSequence n18;
   NodeToken n19;
   Token n20;
   ParameterDefinition n21;
   NodeListOptional n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   ParameterDefinition n26;
   NodeToken n27;
   Token n28;
   NodeToken n29;
   Token n30;
   DeclarationList n31;
   NodeToken n32;
   Token n33;

   {
   }
}
{
   (
      n1=ByteOrderModifier()
      { n0.addNode(n1); }
   )?
   (
      (
         n5=<UNION> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<DATABASE> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      |
         n9=<TABLE> { n8 = JTBToolkit.makeNodeToken(n9); }
         { n3 = new NodeChoice(n8, 2); }
      |
         n11=<SQLINTEGER> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n3 = new NodeChoice(n10, 3); }
      |
         n13=<SQLTEXT> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n3 = new NodeChoice(n12, 4); }
      )
      { n2.addNode(n3); }
   )?
   (
      n16=<IDENTIFIER> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
   )?
   (
      { n22 = new NodeListOptional(); }
      { n18 = new NodeSequence(4); }
      n20="(" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n18.addNode(n19); }
      n21=ParameterDefinition()
      { n18.addNode(n21); }
      (
         { n23 = new NodeSequence(2); }
         n25="," { n24 = JTBToolkit.makeNodeToken(n25); }
         { n23.addNode(n24); }
         n26=ParameterDefinition()
         { n23.addNode(n26); }
         { n22.addNode(n23); }
      )*
      { n22.nodes.trimToSize(); }
      { n18.addNode(n22); }
      n28=")" { n27 = JTBToolkit.makeNodeToken(n28); }
      { n18.addNode(n27); }
      { n17.addNode(n18); }
   )?
   n30="{" { n29 = JTBToolkit.makeNodeToken(n30); }
   n31=DeclarationList()
   n33="}" { n32 = JTBToolkit.makeNodeToken(n33); }
   
   { return new StructDeclaration(n0,n2,n14,n17,n29,n31,n32); }
}

DefinedType DefinedType() :
{
   NodeChoice n0;
   TypeSymbol n1;
   BuiltinType n2;

   {
   }
}
{
   (
      n1=TypeSymbol()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=BuiltinType()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new DefinedType(n0); }
}

TypeSymbol TypeSymbol() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   DotOperand n3;

   {
   }
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=DotOperand()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new TypeSymbol(n0,n2); }
}

BuiltinType BuiltinType() :
{
   NodeOptional n0 = new NodeOptional();
   ByteOrderModifier n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   BitField n21;

   {
   }
}
{
   (
      n1=ByteOrderModifier()
      { n0.addNode(n1); }
   )?
   (
      (
         n4=<UINT8> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6=<UINT16> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      |
         n8=<UINT32> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n2 = new NodeChoice(n7, 2); }
      |
         n10=<UINT64> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n2 = new NodeChoice(n9, 3); }
      |
         n12=<INT8> { n11 = JTBToolkit.makeNodeToken(n12); }
         { n2 = new NodeChoice(n11, 4); }
      |
         n14=<INT16> { n13 = JTBToolkit.makeNodeToken(n14); }
         { n2 = new NodeChoice(n13, 5); }
      |
         n16=<INT32> { n15 = JTBToolkit.makeNodeToken(n16); }
         { n2 = new NodeChoice(n15, 6); }
      |
         n18=<INT64> { n17 = JTBToolkit.makeNodeToken(n18); }
         { n2 = new NodeChoice(n17, 7); }
      |
         n20=<STRING> { n19 = JTBToolkit.makeNodeToken(n20); }
         { n2 = new NodeChoice(n19, 8); }
      |
         n21=BitField()
         { n2 = new NodeChoice(n21, 9); }
      )
      
   )
   
   { return new BuiltinType(n0,n2); }
}

BitField BitField() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   ShiftExpression n11;
   NodeToken n12;
   Token n13;

   {
   }
}
{
   n1=<BIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         { n3 = new NodeSequence(2); }
         n5=":" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n7=<INTEGER_LITERAL> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n8 = new NodeSequence(3); }
         n10=<LT> { n9 = JTBToolkit.makeNodeToken(n10); }
         { n8.addNode(n9); }
         n11=ShiftExpression()
         { n8.addNode(n11); }
         n13=<GT> { n12 = JTBToolkit.makeNodeToken(n13); }
         { n8.addNode(n12); }
         { n2 = new NodeChoice(n8, 1); }
      )
      
   )
   
   { return new BitField(n0,n2); }
}

ByteOrderModifier ByteOrderModifier() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   (
      n2=<BIG> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<LITTLE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new ByteOrderModifier(n0); }
}

ArrayRange ArrayRange() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   RangeExpression n3;
   NodeToken n4;
   Token n5;

   {
   }
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=RangeExpression()
      { n2.addNode(n3); }
   )?
   n5="]" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ArrayRange(n0,n2,n4); }
}

Expression Expression() :
{
   AssignmentExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   CommaOperand n2;

   {
   }
}
{
   n0=AssignmentExpression()
   (
      n2=CommaOperand()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new Expression(n0,n1); }
}

CommaOperand CommaOperand() :
{
   NodeToken n0;
   Token n1;
   AssignmentExpression n2;

   {
   }
}
{
   n1="," { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AssignmentExpression()
   
   { return new CommaOperand(n0,n2); }
}

AssignmentExpression AssignmentExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   UnaryExpression n2;
   AssignmentOperator n3;
   AssignmentExpression n4;
   QuantifiedExpression n5;

   {
   }
}
{
   (
      LOOKAHEAD(UnaryExpression() AssignmentOperator())
      { n1 = new NodeSequence(4); }
      n2=UnaryExpression()
      { n1.addNode(n2); }
      n3=AssignmentOperator()
      { n1.addNode(n3); }
      n4=AssignmentExpression()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(3)
      n5=QuantifiedExpression()
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new AssignmentExpression(n0); }
}

AssignmentOperator AssignmentOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;

   {
   }
}
{
   (
      (
         n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="*=" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6="/=" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8="%=" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      |
         n10="+=" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n0 = new NodeChoice(n9, 4); }
      |
         n12="-=" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n0 = new NodeChoice(n11, 5); }
      |
         n14="<<=" { n13 = JTBToolkit.makeNodeToken(n14); }
         { n0 = new NodeChoice(n13, 6); }
      |
         n16=">>=" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n0 = new NodeChoice(n15, 7); }
      |
         n18="&=" { n17 = JTBToolkit.makeNodeToken(n18); }
         { n0 = new NodeChoice(n17, 8); }
      |
         n20="^=" { n19 = JTBToolkit.makeNodeToken(n20); }
         { n0 = new NodeChoice(n19, 9); }
      |
         n22="|=" { n21 = JTBToolkit.makeNodeToken(n22); }
         { n0 = new NodeChoice(n21, 10); }
      )
      
   )
   
   { return new AssignmentOperator(n0); }
}

QuantifiedExpression QuantifiedExpression() :
{
   NodeOptional n0 = new NodeOptional();
   Quantifier n1;
   ConditionalExpression n2;

   {
   }
}
{
   (
      n1=Quantifier()
      { n0.addNode(n1); }
   )?
   n2=ConditionalExpression()
   
   { return new QuantifiedExpression(n0,n2); }
}

Quantifier Quantifier() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   n1=<FORALL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<IN> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=UnaryExpression()
   n8=":" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new Quantifier(n0,n2,n4,n6,n7); }
}

ConditionalExpression ConditionalExpression() :
{
   LogicalOrExpression n0;
   NodeOptional n1 = new NodeOptional();
   ConditionalExpressionOperand n2;

   {
   }
}
{
   n0=LogicalOrExpression()
   (
      n2=ConditionalExpressionOperand()
      { n1.addNode(n2); }
   )?
   
   { return new ConditionalExpression(n0,n1); }
}

ConditionalExpressionOperand ConditionalExpressionOperand() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
   ConditionalExpression n5;

   {
   }
}
{
   n1=<QUESTIONMARK> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=":" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=ConditionalExpression()
   
   { return new ConditionalExpressionOperand(n0,n2,n3,n5); }
}

ConstantExpression ConstantExpression() :
{
   ConditionalExpression n0;

   {
   }
}
{
   n0=ConditionalExpression()
   
   { return new ConstantExpression(n0); }
}

RangeExpression RangeExpression() :
{
   Expression n0;
   NodeOptional n1 = new NodeOptional();
   UpperBoundExpression n2;

   {
   }
}
{
   n0=Expression()
   (
      n2=UpperBoundExpression()
      { n1.addNode(n2); }
   )?
   
   { return new RangeExpression(n0,n1); }
}

UpperBoundExpression UpperBoundExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;

   {
   }
}
{
   n1=<RANGE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   
   { return new UpperBoundExpression(n0,n2); }
}

LogicalOrExpression LogicalOrExpression() :
{
   LogicalAndExpression n0;
   NodeOptional n1 = new NodeOptional();
   LogicalOrOperand n2;

   {
   }
}
{
   n0=LogicalAndExpression()
   (
      n2=LogicalOrOperand()
      { n1.addNode(n2); }
   )?
   
   { return new LogicalOrExpression(n0,n1); }
}

LogicalOrOperand LogicalOrOperand() :
{
   NodeToken n0;
   Token n1;
   LogicalOrExpression n2;

   {
   }
}
{
   n1=<LOGICALOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=LogicalOrExpression()
   
   { return new LogicalOrOperand(n0,n2); }
}

LogicalAndExpression LogicalAndExpression() :
{
   InclusiveOrExpression n0;
   NodeOptional n1 = new NodeOptional();
   LogicalAndOperand n2;

   {
   }
}
{
   n0=InclusiveOrExpression()
   (
      n2=LogicalAndOperand()
      { n1.addNode(n2); }
   )?
   
   { return new LogicalAndExpression(n0,n1); }
}

LogicalAndOperand LogicalAndOperand() :
{
   NodeToken n0;
   Token n1;
   LogicalAndExpression n2;

   {
   }
}
{
   n1=<LOGICALAND> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=LogicalAndExpression()
   
   { return new LogicalAndOperand(n0,n2); }
}

InclusiveOrExpression InclusiveOrExpression() :
{
   ExclusiveOrExpression n0;
   NodeOptional n1 = new NodeOptional();
   InclusiveOrOperand n2;

   {
   }
}
{
   n0=ExclusiveOrExpression()
   (
      n2=InclusiveOrOperand()
      { n1.addNode(n2); }
   )?
   
   { return new InclusiveOrExpression(n0,n1); }
}

InclusiveOrOperand InclusiveOrOperand() :
{
   NodeToken n0;
   Token n1;
   InclusiveOrExpression n2;

   {
   }
}
{
   n1=<OR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=InclusiveOrExpression()
   
   { return new InclusiveOrOperand(n0,n2); }
}

ExclusiveOrExpression ExclusiveOrExpression() :
{
   AndExpression n0;
   NodeOptional n1 = new NodeOptional();
   ExclusiveOrOperand n2;

   {
   }
}
{
   n0=AndExpression()
   (
      n2=ExclusiveOrOperand()
      { n1.addNode(n2); }
   )?
   
   { return new ExclusiveOrExpression(n0,n1); }
}

ExclusiveOrOperand ExclusiveOrOperand() :
{
   NodeToken n0;
   Token n1;
   ExclusiveOrExpression n2;

   {
   }
}
{
   n1=<XOR> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ExclusiveOrExpression()
   
   { return new ExclusiveOrOperand(n0,n2); }
}

AndExpression AndExpression() :
{
   EqualityExpression n0;
   NodeOptional n1 = new NodeOptional();
   AndOperand n2;

   {
   }
}
{
   n0=EqualityExpression()
   (
      n2=AndOperand()
      { n1.addNode(n2); }
   )?
   
   { return new AndExpression(n0,n1); }
}

AndOperand AndOperand() :
{
   NodeToken n0;
   Token n1;
   AndExpression n2;

   {
   }
}
{
   n1=<AND> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=AndExpression()
   
   { return new AndOperand(n0,n2); }
}

EqualityExpression EqualityExpression() :
{
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   EqualityOperand n2;

   {
   }
}
{
   n0=RelationalExpression()
   (
      n2=EqualityOperand()
      { n1.addNode(n2); }
   )?
   
   { return new EqualityExpression(n0,n1); }
}

EqualityOperand EqualityOperand() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   EqualityExpression n5;

   {
   }
}
{
   (
      (
         n2=<EQ> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<NE> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=EqualityExpression()
   
   { return new EqualityOperand(n0,n5); }
}

RelationalExpression RelationalExpression() :
{
   ShiftExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   RelationalOperand n2;

   {
   }
}
{
   n0=ShiftExpression()
   (
      n2=RelationalOperand()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new RelationalExpression(n0,n1); }
}

RelationalOperand RelationalOperand() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   ShiftExpression n9;

   {
   }
}
{
   (
      (
         n2=<LT> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<LE> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<GT> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<GE> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      )
      
   )
   n9=ShiftExpression()
   
   { return new RelationalOperand(n0,n9); }
}

ShiftExpression ShiftExpression() :
{
   AdditiveExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   ShiftOperand n2;

   {
   }
}
{
   n0=AdditiveExpression()
   (
      n2=ShiftOperand()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ShiftExpression(n0,n1); }
}

ShiftOperand ShiftOperand() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   AdditiveExpression n5;

   {
   }
}
{
   (
      (
         n2=<SHIFTLEFT> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<SHIFTRIGHT> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=AdditiveExpression()
   
   { return new ShiftOperand(n0,n5); }
}

AdditiveExpression AdditiveExpression() :
{
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   Summand n2;

   {
   }
}
{
   n0=MultiplicativeExpression()
   (
      n2=Summand()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AdditiveExpression(n0,n1); }
}

Summand Summand() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   MultiplicativeExpression n5;

   {
   }
}
{
   (
      (
         n2=<PLUS> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MINUS> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n5=MultiplicativeExpression()
   
   { return new Summand(n0,n5); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
   CastExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   Multiplicand n2;

   {
   }
}
{
   n0=CastExpression()
   (
      n2=Multiplicand()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new MultiplicativeExpression(n0,n1); }
}

Multiplicand Multiplicand() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   CastExpression n7;

   {
   }
}
{
   (
      (
         n2=<MULTIPLY> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<DIVIDE> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<MODULO> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      )
      
   )
   n7=CastExpression()
   
   { return new Multiplicand(n0,n7); }
}

CastExpression CastExpression() :
{
   NodeChoice n0;
   CastOperand n1;
   UnaryExpression n2;

   {
   }
}
{
   (
      LOOKAHEAD(CastOperand())
      n1=CastOperand()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=UnaryExpression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new CastExpression(n0); }
}

CastOperand CastOperand() :
{
   NodeToken n0;
   Token n1;
   DefinedType n2;
   NodeToken n3;
   Token n4;
   CastExpression n5;

   {
   }
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=DefinedType()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=CastExpression()
   
   { return new CastOperand(n0,n2,n3,n5); }
}

UnaryExpression UnaryExpression() :
{
   NodeChoice n0;
   PostfixExpression n1;
   UnaryOperand n2;
   SizeOfOperand n3;

   {
   }
}
{
   (
      n1=PostfixExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=UnaryOperand()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=SizeOfOperand()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new UnaryExpression(n0); }
}

UnaryOperand UnaryOperand() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   CastExpression n9;

   {
   }
}
{
   (
      (
         n2=<PLUS> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4=<MINUS> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n0 = new NodeChoice(n3, 1); }
      |
         n6=<TILDE> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n0 = new NodeChoice(n5, 2); }
      |
         n8=<BANG> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n0 = new NodeChoice(n7, 3); }
      )
      
   )
   n9=CastExpression()
   
   { return new UnaryOperand(n0,n9); }
}

SizeOfOperand SizeOfOperand() :
{
   NodeToken n0;
   Token n1;
   UnaryExpression n2;

   {
   }
}
{
   n1=<SIZEOF> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=UnaryExpression()
   
   { return new SizeOfOperand(n0,n2); }
}

PostfixExpression PostfixExpression() :
{
   PrimaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   ArrayOperand n3;
   FunctionArgumentList n4;
   DotOperand n5;
   ChoiceOperand n6;

   {
   }
}
{
   n0=PrimaryExpression()
   (
      (
         n3=ArrayOperand()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=FunctionArgumentList()
         { n2 = new NodeChoice(n4, 1); }
      |
         n5=DotOperand()
         { n2 = new NodeChoice(n5, 2); }
      |
         n6=ChoiceOperand()
         { n2 = new NodeChoice(n6, 3); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new PostfixExpression(n0,n1); }
}

ChoiceOperand ChoiceOperand() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
}
{
   n1=<IS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new ChoiceOperand(n0,n2); }
}

ArrayOperand ArrayOperand() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ArrayOperand(n0,n2,n3); }
}

FunctionArgumentList FunctionArgumentList() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   FunctionArgument n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   FunctionArgument n9;
   NodeToken n10;
   Token n11;

   {
   }
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeListOptional(); }
      { n3 = new NodeSequence(2); }
      n4=FunctionArgument()
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=FunctionArgument()
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new FunctionArgumentList(n0,n2,n10); }
}

DotOperand DotOperand() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   {
   }
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new DotOperand(n0,n2); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   VariableName n1;
   Constant n2;
   ParenthesizedExpression n3;

   {
   }
}
{
   (
      n1=VariableName()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Constant()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=ParenthesizedExpression()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new PrimaryExpression(n0); }
}

ParenthesizedExpression ParenthesizedExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   {
   }
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ParenthesizedExpression(n0,n2,n3); }
}

VariableName VariableName() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new VariableName(n0); }
}

FunctionArgument FunctionArgument() :
{
   AssignmentExpression n0;

   {
   }
}
{
   n0=AssignmentExpression()
   
   { return new FunctionArgument(n0); }
}

Constant Constant() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOATING_POINT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<CHARACTER_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<STRING_LITERAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new Constant(n0); }
}
