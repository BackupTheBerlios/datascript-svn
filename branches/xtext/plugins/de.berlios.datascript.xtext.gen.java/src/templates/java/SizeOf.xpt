«IMPORT dataScript»
«EXTENSION templates::Extensions»

«DEFINE main FOR Model-»
«FILE package.name.replaceAll("\\.", "/") + "/__SizeOf.java"-»
«EXPAND FileHeader::header-»
«EXPAND begin-»
«FOREACH allUsedModels().elements.typeSelect(EnumType) AS enumeration-»
  «EXPAND enumeration FOR enumeration»
«ENDFOREACH-»
«EXPAND end-»
«ENDFILE»
«ENDDEFINE»


«DEFINE begin FOR Model»
public class __SizeOf extends «package.name».__DepthFirstVisitor
{
    protected int __bitsize = 0;


    @Override
    public void alignto(int n)
    {
        if (__bitsize != 0)
        {    
            __bitsize = (((__bitsize-1) / n) + 1) * n;
        }
    }


    @Override
    public void visitInt8(byte n, Object arg) 
    {
        __bitsize += 8;
    }


    @Override
    public void visitInt16(short n, Object arg)
    {
        __bitsize += 16;
    }


    @Override
    public void visitInt32(int n, Object arg)
    {
        __bitsize += 32;
    }


    @Override
    public void visitInt64(long n, Object arg)
    {
        __bitsize += 64;
    }


    @Override
    public void visitUInt8(short n, Object arg)
    {
        __bitsize += 8;
    }


    @Override
    public void visitUInt16(int n, Object arg)
    {
        __bitsize += 16;
    }


    @Override
    public void visitUInt32(long n, Object arg)
    {
        __bitsize += 32;
    }


    @Override
    public void visitUInt64(BigInteger n, Object arg)
    {
        __bitsize += 64;
    }


    @Override
    public void visitBitField(byte n, int length, Object arg)
    {
        __bitsize += length;
    }


    @Override
    public void visitBitField(short n, int length, Object arg)
    {
        __bitsize += length;
    }


    @Override
    public void visitBitField(int n, int length, Object arg)
    {
        __bitsize += length;
    }


    @Override
    public void visitBitField(long n, int length, Object arg)
    {
        __bitsize += length;
    }


    @Override
    public void visitBitField(BigInteger n, int length, Object arg)
    {
        __bitsize += length;
    }


    @Override
    public void visitString(String n, Object arg)
    {
        // do not use n.length()! the result contains only 
        // the count auf characters, not the count of bytes
        __bitsize += (n.getBytes().length + 1) << 3;
    }


    public static int sizeof(«package.name».__Visitor.Acceptor a) 
    {
        __SizeOf v = new __SizeOf();
        a.accept(v, null);
        if (v.__bitsize % 8 != 0) 
        {
            throw new DataScriptError("bitsizeof not divisible by 8: " + v.__bitsize);
        }
        return v.__bitsize / 8;
    }


    public static int bitsizeof(«package.name».__Visitor.Acceptor a) 
    {
        __SizeOf v = new __SizeOf();
        a.accept(v, null);
        return v.__bitsize;
    }

«ENDDEFINE»

«DEFINE enumeration FOR EnumType»
    @Override
    public void visit(«model().package.name».«name» node, Object arg)
    {
        __bitsize += node.bitsizeof();
    }

«ENDDEFINE»

«DEFINE end FOR Model»
}

// END OF FILE
«ENDDEFINE»
