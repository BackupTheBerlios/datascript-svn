«IMPORT dataScript»
«EXTENSION templates::Extensions»




«DEFINE main(Model root) FOR ChoiceType-»
«FILE this.getJavaFileName()-»
«EXPAND FileHeader::header FOR model()-»
«EXPAND begin(root)-»
«EXPAND end-»
«ENDFILE»
«ENDDEFINE»



«DEFINE begin(Model root) FOR ChoiceType»
public class «name» implements «root.package.name».__Visitor.Acceptor, Writer, SizeOf
{
    long __fpos;
    private CallChain __cc;
    
    
    //EXPAND members

    public void accept(«root.package.name».__Visitor visitor, Object arg)
    {
        __cc = visitor.getCallChain();
        visitor.visit(this, arg);
    }


    public int sizeof() 
    {
        return «root.package.name».__SizeOf.sizeof(this);
    }


    public int bitsizeof() 
    {
        return «rootPackageName()».__SizeOf.bitsizeof(this);
    }

«ENDDEFINE»

«DEFINE equals FOR ChoiceType»
    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        «name» other = («name») obj;
  «FOREACH members AS m-»
        if («m.alternative.name» == null)
        {
            if (other.«m.alternative.name» != null)
                return false;
        }
        else if (!«m.alternative.name».equals(other.«m.alternative.name»))
            return false;
  «ENDFOREACH»        
        return true;
    }

«ENDDEFINE»




«DEFINE throwIfNotEqual FOR ChoiceType»
    public void throwIfNotEqual(«name» other)
    {
        if (this == other)
            return;
        if (other == null)
            throw new DataScriptError("other == null");
  «FOREACH members AS m-»
    «IF m.isSimple()-»
        EqualityCheck.throwIfNotEqual(«m.alternative.name», other.«m.alternative.name»);
    «ELSE-»
        «m.alternative.name».throwIfNotEqual(other.«m.alternative.name»);
    «ENDIF-»
  «ENDFOREACH-»        
    }

«ENDDEFINE»



«DEFINE field FOR Field»
    public «javaType()» «getter()»()
    {
        return «name»;
    }


  «IF array != null-»
    public void «setter()»(List<«elementType()»> «name»)
    {
        this.«name» = new ObjectArray<«elementType()»>(«name»);
    }
  «ELSE-»
    public void «setter()»(«javaType()» «name»)
    {
    «IF isSimple()-»
        // check range
        if ((«max()»L < «name») || («name» < «min()»L))
            throw new DataScriptError("«name»: value " + «name» + " out of range [«min()»..«max()»]");

    «ENDIF-»
        this.«name» = «name»;
    }

  «ENDIF-»


  «IF opt != null-»
    public boolean «indicator()»()
    {
        return «name» != null;
    }

  «ENDIF-»
«ENDDEFINE»



«DEFINE param FOR Parameter»
«ENDDEFINE»



«DEFINE function FOR Function»
«ENDDEFINE»





«DEFINE writeField FOR Field-»
                    writeField(«name»);
«ENDDEFINE»



«DEFINE formalParameters FOR ChoiceType-»
«IF parameters != null-»
«FOREACH parameters.parameters AS param-»
, «param.type.emit()» «param.name-»    
«ENDFOREACH-»
«ENDIF-»
«ENDDEFINE»

«DEFINE actualParameters FOR ChoiceType-»
«IF parameters != null-»
«FOREACH parameters.parameters AS param-»
, «param.name-»    
«ENDFOREACH-»
«ENDIF-»
«ENDDEFINE»


«DEFINE end FOR ChoiceType»
}

// END OF FILE
«ENDDEFINE»
