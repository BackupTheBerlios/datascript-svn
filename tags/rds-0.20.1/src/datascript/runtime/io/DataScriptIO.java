package datascript.runtime.io;

import java.lang.reflect.Constructor;

import datascript.runtime.CallChain;

/**
 * Convenience class for reading and writing DataScript objects from and to 
 * byte arrays.
 * <p>
 * Usage:
 * <pre>
 * MyType myType1;
 * byte[] blob = DataScriptIO.write(myType1);
 * 
 * MyType myType2 = DataScriptIO.read(MyType.class, blob);
 * </pre>
 * 
 * @author HWellmann
 */
public class DataScriptIO
{
    /**
     * Takes a DataScript object, writes it to a byte array stream and returns
     * the resulting byte array.
     * 
     * @param <E>   DataScript class generated by rds
     * @param obj   a DataScript object of the given class
     * @return byte array with a serialized version of the given object
     */
    public static <E extends Writer> byte[] write(E obj)
    {
        try
        {
            ByteArrayBitStreamWriter writer = new ByteArrayBitStreamWriter();
            obj.write(writer, new CallChain());
            writer.close();
            return writer.toByteArray();
        }
        catch (Exception exc)
        {
            throw new RuntimeException(exc);
        }
    }
    
    /**
     * A "virtual constructor", building a DataScript object of a given class, 
     * reading from a byte array.
     * 
     * @param <E>        DataScript class generated by rds
     * @param clazz      the Class instance of the given class
     * @param byteArray  byte array to be read
     * @return  DataScript object of the given class.
     */
    public static <E> E read(Class<E> clazz, byte[] byteArray)
    {
        try
        {
            ByteArrayBitStreamReader reader = new ByteArrayBitStreamReader(
                    byteArray);
            Constructor<E> constructor = clazz
                    .getConstructor(BitStreamReader.class);
            E e = constructor.newInstance(reader);
            return e;
        }
        catch (Exception exc)
        {
            throw new RuntimeException(exc);
        }
    }
}
