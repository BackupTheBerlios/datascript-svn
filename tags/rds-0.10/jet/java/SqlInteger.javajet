<%
/* BSD License
 *
 * Copyright (c) 2006, Harald Wellmann, Harman/Becker Automotive Systems
 * All rights reserved.
 * 
 * This software is derived from previous work
 * Copyright (c) 2003, Godmar Back.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 * 
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 * 
 *     * Neither the name of Harman/Becker Automotive Systems or
 *       Godmar Back nor the names of their contributors may be used to
 *       endorse or promote products derived from this software without
 *       specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%>
<%@ jet package="datascript.jet.java" 
        imports="datascript.ast.* datascript.emit.java.* java.util.List java.util.ListIterator" 
        class="SqlInteger" %>
<% 
    SqlIntegerEmitter e = (SqlIntegerEmitter) argument;
    String pkg = e.getGlobal().getPackageName();
    SqlIntegerType integerType = e.getSqlIntegerType();
    String name = integerType.getName();
    
    String q = "?";
    for (int i = 1; i < integerType.getNumFields(); i++)
    {
        q += ",?";
    }
%>
<%@include file="FileHeader.inc"%>
// DS-Import
<%=e.getGlobal().getPackageImports()%>
import java.sql.*;



public class <%=name%> implements __Visitor.Acceptor, SizeOf
{

    public void accept(__Visitor visitor, Object arg)
    {
        visitor.visit(this, arg);
    }


    public int sizeof() 
    {
        return __SizeOf.sizeof(this);
    }


    public boolean equals(Object obj)
    {
    	if (obj instanceof <%=name%>)
    	{
    		<%=name%> that = (<%=name%>) obj;
    		return 
<%
    SqlIntegerType s = e.getSqlIntegerType();
    for (Field field : s.getFields())    
    {
		String optional = e.getOptionalClause(field);
%>
				(<%=(optional != null)? "(!("+optional+"))? true : " : ""%>(<%

    	String fieldName = field.getName();
        TypeInterface type = field.getFieldType();
        type = TypeReference.resolveType(type);
        if (type instanceof EnumType)
		{
			%>this.<%=fieldName%>.getValue() == that.<%=fieldName%>.getValue()<%
		}
		else if (type instanceof BitFieldType && ((BitFieldType)type).getLength() == 0)
		{
			%>this.<%=fieldName%>.compareTo(that.<%=fieldName%>) == 0<%
		}
		/*
		else if (type instanceof SequenceType ||
				 type instanceof UnionType ||
				 type instanceof ArrayType ||
				 type instanceof TypeInstantiation ||
				 type instanceof StringType ||
				 (type instanceof StdIntegerType && 
				 	((StdIntegerType)type).getType() == datascript.antlr.DataScriptParserTokenTypes.UINT64)
				 )
		*/
		else if (type instanceof StdIntegerType && 
				 	((StdIntegerType)type).getType() == datascript.antlr.DataScriptParserTokenTypes.UINT64)
    	{
			%>this.<%=fieldName%>.equals(that.<%=fieldName%>)<%
		}
		else
		{
			%>this.<%=fieldName%> == that.<%=fieldName%><%
		}
		%>)) && /* <%=type.getClass().getCanonicalName()%>*/<%
    }
%> 
				true;
		}
		return super.equals(obj);
    }


    public <%=name%>()
    {
    }


	// Contructor for <%=name%> 
    public <%=name%>(
<%
    int fieldCount = 0;
    int numFields = s.getNumFields();
    for (Field field : s.getFields())    
    {
        String fieldName = field.getName();
        String fieldType = TypeNameEmitter.getTypeName(field.getFieldType());
        String sep = (fieldCount == numFields-1) ? "" : ", ";
%>
        <%=fieldType%> <%=fieldName%><%=sep%> 
<%
        fieldCount++;
    }
%>
        )
    {
<%
    for (Field field : s.getFields())    
    {
        int bitSize = field.getFieldType().sizeof(null).integerValue().intValue();
        long bitmask = (1L << bitSize) - 1L;
        String fieldName = field.getName();
%>
        this.<%=fieldName%> = <%=fieldName%>;
        this.<%=fieldName%> &= <%=bitmask%>L;
<%
    }
%>
    }

<%
    int totalTypeSize = 0;
    for (Field field : e.getFields())
    {
        String type =  TypeNameEmitter.getTypeName(field.getFieldType());
%>

    private <%=type%> <%=field%>;

<%
    	String getter = AccessorNameEmitter.getGetterName(field);
%>
    public <%=type%> <%=getter%>() 
    { 
        return <%=field%>; 
    }

<%
        String setter = AccessorNameEmitter.getSetterName(field);
%>
    public void <%=setter%>(<%=type%> <%=field%>) 
    { 
        this.<%=field%> = <%=field%>; 
    }

<%
        totalTypeSize += field.getFieldType().sizeof(null).integerValue().intValue();
    }

    String fittingType = "";
    if (totalTypeSize <= 8)
        fittingType = "byte";
    else if (totalTypeSize <= 16)
        fittingType = "short";
    else if (totalTypeSize <= 32)
        fittingType = "int";
    else if (totalTypeSize <= 64)
        fittingType = "long";
    else /* if (totalTypeSize > 64) */
    	throw new RuntimeException("total size of all fields in '" + name + "' exceed 64 bits");
%>

    public <%=fittingType%> pack()
    {
        <%=fittingType%> retValue = 0;
<%
        {
            List<Field> list = e.getFields();
            ListIterator<Field> li = list.listIterator(list.size());
            int bitSize = 0;
            int shiftBits = 0;
            while (li.hasPrevious())
            {
                Field field = li.previous();

        	    String type =  TypeNameEmitter.getTypeName(field.getFieldType());
                bitSize = field.getFieldType().sizeof(null).integerValue().intValue();
                long bitmask = (1L << bitSize) - 1L;
%>
        retValue |= ((<%=fittingType%>)<%=field%> & <%=bitmask%>L) << <%=shiftBits%>;
<%
                shiftBits += bitSize;
            }
        }
%>
        return retValue;
    }


<%
        String formalPar = e.getFormalParameterList();
        String actualPar = e.getActualParameterList();
%>
    public <%=name%>(<%=fittingType%> __in<%=formalPar%>) throws Exception 
    {
        read(__in, new CallChain()<%=actualPar%>);
    }


    public <%=name%>(<%=fittingType%> __in, CallChain __cc<%=formalPar%>) throws Exception 
    {
        read(__in, __cc<%=actualPar%>);
    }


    public void read(<%=fittingType%> __in, CallChain __cc<%=formalPar%>) throws Exception 
    {
<%
        List<Field> list = e.getFields();
        ListIterator<Field> li = list.listIterator(list.size());
        int bitSize = 0;
        int shiftBits = 0;
        while (li.hasPrevious())
        {
            Field field = li.previous();

            shiftBits += bitSize;
        	String type =  TypeNameEmitter.getTypeName(field.getFieldType());
            bitSize = field.getFieldType().sizeof(null).integerValue().intValue();
            long bitmask = (1L << bitSize) - 1L;
%>
        <%=field%> = (<%=type%>)(__in >> <%=shiftBits%> & <%=bitmask%>L);
<%
        }
%>
    }
}

// END OF FILE
    